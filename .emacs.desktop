;; -*- mode: emacs-lisp; coding: emacs-mule; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Tue Oct 30 23:21:38 2018
;; Desktop file format version 208
;; Emacs version 26.1

;; Global section:
(setq desktop-saved-frameset [frameset 1 (23512 26866 430589 812000) (desktop . "208") "linguini@linguini-gentoo" nil nil ((((minibuffer) (undecorated) (override-redirect) (font-backend xft x) (font . "-PfEd-Inconsolata-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1") (font-parameter) (border-width . 0) (internal-border-width . 0) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#eeeeec") (background-color . "#2e3436") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 0) (right-fringe . 0) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 0) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 0) (scroll-bar-height . 0) (alpha) (no-focus-on-map) (no-accept-focus) (fullscreen) (visibility) (skip-taskbar) (z-group) (display-type . color) (background-mode . dark) (cursor-color . "#fce94f") (ccc-frame-cursor-color . "#eeeeee") (ccc-frame-foreground-color . "#c6c6c6") (ccc-frame-background-color . "#303030") (powerline-cache) (frameset--id . "7700-7FD8-2F3A-C4C1") (frameset--mini nil . "B8FF-DF76-1896-50D3") (height . 76) (width . 20) (modeline . t) (unsplittable . t) (left . 1930) (top . 0) (icon-name) (display . ":0") (explicit-name)) ((min-height . 4) (min-width . 10) (min-height-ignore . 2) (min-width-ignore . 2) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 56) (min-pixel-width . 60) (min-pixel-height-ignore . 28) (min-pixel-width-ignore . 12) (min-pixel-height-safe . 14) (min-pixel-width-safe . 12)) leaf (last . t) (pixel-width . 120) (pixel-height . 1064) (total-width . 20) (total-height . 76) (normal-height . 1.0) (normal-width . 1.0) (buffer " SPEEDBAR" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated . t) (point . 92) (start . 1))) (((minibuffer . t) (undecorated) (override-redirect) (font-backend xft x) (font . "-PfEd-Inconsolata-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1") (font-parameter) (border-width . 0) (internal-border-width . 0) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "black") (background-color . "white") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 0) (right-fringe . 0) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 1) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 0) (scroll-bar-height . 0) (alpha) (no-focus-on-map) (no-accept-focus) (fullscreen . fullboth) (visibility . t) (skip-taskbar) (z-group) (display-type . color) (background-mode . light) (cursor-color . "#eeeeee") (powerline-cache) (sticky) (frameset--id . "4545-89A5-F8DE-BA96") (frameset--mini t . t) (modeline . t) (unsplittable) (icon-name) (display . ":0") (explicit-name) (ccc-frame-cursor-color . "#eeeeee") (ccc-frame-foreground-color . "black") (ccc-frame-background-color . "white") (height . 73) (width . 320) (left . 1024) (top . 24)) ((min-height . 8) (min-width . 20) (min-height-ignore . 6) (min-width-ignore . 4) (min-height-safe . 2) (min-width-safe . 4) (min-pixel-height . 112) (min-pixel-width . 120) (min-pixel-height-ignore . 84) (min-pixel-width-ignore . 24) (min-pixel-height-safe . 28) (min-pixel-width-safe . 24)) hc (pixel-width . 1920) (pixel-height . 1021) (total-width . 320) (total-height . 72) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (vc (pixel-width . 907) (pixel-height . 1021) (total-width . 151) (total-height . 72) (normal-height . 1.0) (normal-width . 0.4733820459290188) (combination-limit) (leaf (pixel-width . 907) (pixel-height . 517) (total-width . 151) (total-height . 36) (normal-height . 0.5) (normal-width . 1.0) (buffer "Slack - NCAS" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 nil nil 0 nil) (vscroll . 0) (dedicated) (point . 1) (start . 1))) (leaf (last . t) (pixel-width . 907) (pixel-height . 504) (total-width . 151) (total-height . 36) (normal-height . 0.5) (normal-width . 1.0) (buffer "’¥·’¥¹’¥Æ’¥à’¥â’¥Ë’¥¿" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 nil nil 0 nil) (vscroll . 0) (dedicated) (point . 1) (start . 1)))) (leaf (last . t) (pixel-width . 1013) (pixel-height . 1021) (total-width . 169) (total-height . 72) (normal-height . 1.0) (normal-width . 0.5266179540709812) (buffer "Twitter - Vivaldi" (selected . t) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 nil nil 0 nil) (vscroll . 0) (dedicated) (point . 1) (start . 1)))) (((minibuffer . t) (undecorated) (override-redirect) (font-backend xft x) (font . "-PfEd-Inconsolata-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1") (font-parameter) (border-width . 0) (internal-border-width . 0) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#eeeeec") (background-color . "#2e3436") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 0) (right-fringe . 0) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 1) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 0) (scroll-bar-height . 0) (alpha) (no-focus-on-map) (no-accept-focus) (fullscreen . fullboth) (visibility . t) (skip-taskbar) (z-group) (display-type . color) (background-mode . dark) (cursor-color . "#fce94f") (powerline-cache) (sticky) (frameset--id . "B8FF-DF76-1896-50D3") (frameset--mini t) (modeline . t) (unsplittable) (icon-name) (display . ":0") (explicit-name) (ccc-frame-cursor-color . "#fce94f") (ccc-frame-foreground-color . "#eeeeec") (ccc-frame-background-color . "#2e3436") (height . 75) (width . 320) (left . 0) (top . 0)) ((min-height . 8) (min-width . 40) (min-height-ignore . 6) (min-width-ignore . 8) (min-height-safe . 2) (min-width-safe . 8) (min-pixel-height . 112) (min-pixel-width . 240) (min-pixel-height-ignore . 84) (min-pixel-width-ignore . 48) (min-pixel-height-safe . 28) (min-pixel-width-safe . 48)) hc (pixel-width . 1920) (pixel-height . 1045) (total-width . 320) (total-height . 75) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (vc (pixel-width . 1461) (pixel-height . 1045) (total-width . 243) (total-height . 75) (normal-height . 1.0) (normal-width . 0.7617225108091088) (combination-limit) (leaf (pixel-width . 1461) (pixel-height . 411) (total-width . 243) (total-height . 30) (normal-height . 0.39213806327900286) (normal-width . 1.0) (buffer "linguini.org" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated) (point . 631) (start . 431))) (hc (last . t) (pixel-width . 1461) (pixel-height . 634) (total-width . 243) (total-height . 45) (normal-height . 0.6078619367209971) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 749) (pixel-height . 634) (total-width . 125) (total-height . 45) (normal-height . 1.0) (normal-width . 0.515130674002751) (buffer "*terminal<1>*" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated) (point . 136725) (start . 136697))) (leaf (last . t) (pixel-width . 712) (pixel-height . 634) (total-width . 118) (total-height . 45) (normal-height . 1.0) (normal-width . 0.48486932599724863) (buffer "*terminal<1>*" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated) (point . 1) (start . 1))))) (leaf (pixel-width . 213) (pixel-height . 1045) (total-width . 36) (total-height . 75) (normal-height . 1.0) (normal-width . 0.11116910229645094) (buffer "*Compile-Log*" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated) (point . 55893) (start . 54431))) (leaf (last . t) (pixel-width . 246) (pixel-height . 1045) (total-width . 41) (total-height . 75) (normal-height . 1.0) (normal-width . 0.12710838689444034) (buffer "*Messages*" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated) (point . 59420) (start . 57188)))) (((minibuffer . t) (undecorated) (override-redirect) (font-backend xft x) (font . "-PfEd-Inconsolata-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1") (font-parameter) (border-width . 0) (internal-border-width . 0) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#eeeeec") (background-color . "#2e3436") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 0) (right-fringe . 0) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 1) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 0) (scroll-bar-height . 0) (alpha) (no-focus-on-map) (no-accept-focus) (fullscreen . fullboth) (visibility . t) (skip-taskbar) (z-group) (display-type . color) (background-mode . dark) (cursor-color . "#fce94f") (environment) (powerline-cache) (sticky) (frameset--id . "0F0A-10D7-6337-9513") (frameset--mini t) (modeline . t) (unsplittable) (icon-name) (display . ":0") (explicit-name) (ccc-frame-cursor-color . "#eeeeee") (ccc-frame-foreground-color . "black") (ccc-frame-background-color . "white") (height . 53) (width . 170) (left . 0) (top . 0)) ((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 3) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 56) (min-pixel-width . 60) (min-pixel-height-ignore . 42) (min-pixel-width-ignore . 18) (min-pixel-height-safe . 14) (min-pixel-width-safe . 12)) leaf (pixel-width . 1024) (pixel-height . 733) (total-width . 171) (total-height . 52) (normal-height . 1.0) (normal-width . 1.0) (buffer "*Messages*" (selected) (hscroll . 0) (fringes 1 1 nil) (margins nil) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated) (point . 59420) (start . 58315))))])
(setq kill-ring '("https://jp.pornhub.com/view_video.php?viewkey=ph5b27ae0f3e910" "’¥Õ’¥§’¥é ’²¼’ÉÊ’¥¢" "’¥¤’¥Þ’¥é’¥Á’¥ª" "’Ìµ’½¤’Àµ" "’¿å’²» ’¥Õ’¥§’¥é" "’¥Ç’¥«’Æý’ÎØ ’¥¨’¥í" "   ’Æ°’²è" "’Æ¬’¥µ’¥¤’¥º ’¤ª’¤Ã’¤Ñ’¤¤ ’¥¨’¥í" "nm-connection-editor" "systemctl start systemd-resolved.service" "systemctl enable systemd-resolved.service\n" "ln -snf /run/systemd/resolve/resolv.conf /etc/resolv.conf" "#systemctl enable systemd-networkd.service" "/etc/systemd/network/50-dhcp.network" "enp3s0" "ls /lib/modules/`uname -r`/kernel/drivers/net" "et-setup eth0" "ping -c 3 www.gentoo.org" " dhcpcd -U enp0s3" "echo \"nameserver 8.8.8.8\" >> /etc/resolv.conf" "\n0;fish  /home/linguini—§þ                                                                                              \nlinguini@linguini-gentoo ~> systec\nfish: Unknown command 'systec'\n0;fish  /home/linguini—§þ                                                                                              \nlinguini@linguini-gentoo ~> systemctl start NetworkManager\n==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ====\n'NetworkManager.service'’¤ò’³«’»Ï’¤¹’¤ë’¤Ë’¤Ï’Ç§’¾Ú’¤¬’É¬’Í×’¤Ç’¤¹’¡£\nAuthenticating as: root\nPassword: \n==== AUTHENTICATION COMPLETE ====\n0;fish  /home/linguini—§þ                                                                                              \nlinguini@linguini-gentoo ~> ping www.impallari.com\nPING www.impallari.com (181.88.192.134) 56(84) bytes of data.\n^C\n--- www.impallari.com ping statistics ---\n10 packets transmitted, 0 received, 100% packet loss, time 245ms\n\n0;fish  /home/linguini—§þ                                                                                              \nlinguini@linguini-gentoo ~> ping www.google.com\nPING www.google.com(kix06s01-in-x04.1e100.net (2404:6800:400a:806::2004)) 56 data bytes\n^C\n--- www.google.com ping statistics ---\n4 packets transmitted, 0 received, 100% packet loss, time 56ms\n\n0;fish  /home/linguini—§þ                                                                                              \nlinguini@linguini-gentoo ~> ping www.npca.jp\nPING npca.jp (119.245.240.198) 56(84) bytes of data.\n64 bytes from st0198.nas981.kobe.nttpc.ne.jp (119.245.240.198): icmp_seq=1 ttl=244 time=18.6 ms\n64 bytes from st0198.nas981.kobe.nttpc.ne.jp (119.245.240.198): icmp_seq=2 ttl=244 time=18.4 ms\n64 bytes from st0198.nas981.kobe.nttpc.ne.jp (119.245.240.198): icmp_seq=3 ttl=244 time=19.1 ms\n" "’¤¬’¤Ã’¤¬’¤¬’¤Ã’¤¬’¤¬’¤Ã’¤Ã’¤¬’¤¬’¤¬’¤¬’¤Ã’¤Ã’¤¬’¤Ã’¤Ã’¤Ã’¤¬’¤Ã’¤Ã’¤Ã’¤Ã’¤¬’¤¬’¤¬’¤¬" "#!/bin/bash\n\n# Source: Ruar”«¿ ”©¬degaard, latest-widevine.sh, https://gist.github.com/ruario/3c873d43eb20553d5014bd4d29fe37f1\n# Patch:  2018-02-26 by GwenDragon\n#         for extraction of libwidevinecdm.so from latest Chrome Stable \n#\n\navailable () {\n  command -v $1 >/dev/null 2>&1\n}\n\n# Set Output dir\nWIDEVINE_INSTALL_DIR=${WIDEVINE_INSTALL_DIR:-/opt/google/chrome}\n\n# Set temp dir\nTMP=${TMP:-/tmp}\n\n# Set staging dir\nSTAGINGDIR=$TMP/widevine-staging\n\n# If the staging directory is already present from the past, clear it down\n# and re-create it.\nif [ -d \"$STAGINGDIR\" ]; then\n  rm -fr \"$STAGINGDIR\"\nfi\n\n# Make sure we have wget or curl\nif available wget; then\n  SILENT_DL=\"wget -qO-\"\n  LOUD_DL=\"wget\"\nelif available curl; then\n  SILENT_DL=\"curl -s\"\n  LOUD_DL=\"curl -O\"\nelse\n  echo \"Install wget or curl\" >&2\n  exit 1\nfi\n\nmkdir -p \"$STAGINGDIR\"\ncd \"$STAGINGDIR\"\n\n### Get architecture\ncase $(uname -m) in\n  x86_64) ARCH=x86_64; DEB_ARCH=amd64; ;;\n    i?86) ARCH=i386;   DEB_ARCH=i386;  ;;\n    arm*) ARCH=arm;    DEB_ARCH=armhf; ;;\nesac ; \n\n# Now get fetch latech Chrome architecture\n$LOUD_DL https://dl.google.com/linux/direct/google-chrome-stable_current_${DEB_ARCH}.deb\n\n(ar p google-chrome-stable_current_${DEB_ARCH}.deb data.tar.xz | tar xJf - ./opt/google/chrome/libwidevinecdm.so --strip 4);\nVERSION=$(strings libwidevinecdm.so | grep -P \"1\\.\\d+\\.\\d+\\.\\d+\");\n\n# Error out if $VERISON is unset, e.g. because previous command failed\nif [ -z $VERSION ]; then\n  echo \"Could not work out the latest version; exiting\" >&2\n  rm -fr \"$STAGINGDIR\" ;\n  exit 1\nfi\n\n# Don't start repackaging if the same version is already installed\nif [ -e \"$WIDEVINE_INSTALL_DIR/widevine-$VERSION\" ] ; then\n  echo \"The latest Widevine ($VERSION) is already installed\"\n  rm -fr \"$STAGINGDIR\" ;\n  exit 0\nfi\n\n# Add version number file\ntouch \"widevine-$VERSION\"\n\n# Escalate privileges if needed and copy files into place\nif [ \"$UID\" = 0 ]; then\n  install -Dm644 libwidevinecdm.so \"$WIDEVINE_INSTALL_DIR/libwidevinecdm.so\"\n  install -Dm644 widevine-$VERSION \"$WIDEVINE_INSTALL_DIR/widevine-$VERSION\"\nelif [ -r /etc/os-release ] && grep -qx 'ID=ubuntu' /etc/os-release; then\n  echo \"Calling sudo ... If prompted, please enter your password so Widevine can be copied into place\"\n  sudo install -Dm644 libwidevinecdm.so \"$WIDEVINE_INSTALL_DIR/libwidevinecdm.so\"\n  if [ -e \"$WIDEVINE_INSTALL_DIR/libwidevinecdm.so\" ] ; then\n    sudo install -Dm644 widevine-$VERSION \"$WIDEVINE_INSTALL_DIR/widevine-$VERSION\"\n  else\n    echo \"Something went wrong installing libwidevinecdm.so\" >&2\n    rm -fr \"$STAGINGDIR\" ;\n    exit 1\n  fi\nelse\n  echo \"Please enter your root password so Widevine can be copied into place\"\n  su -c \"sh -c \\\"install -Dm644 libwidevinecdm.so $WIDEVINE_INSTALL_DIR/libwidevinecdm.so && install -Dm644 widevine-$VERSION $WIDEVINE_INSTALL_DIR/widevine-$VERSION\\\"\"\nfi\n\n# Tell the user we are done\necho \"Widevine ($VERSION) installed into $WIDEVINE_INSTALL_DIR\"\n\nrm -fr \"$STAGINGDIR\" ;" "install-latest-widevine-for-vivaldi" "gdbus-codegen" "emerge --info '=x11-wm/mutter-3.26.2-r1::gentoo'" "write" "gdbus-codegen" "/glib" "sudo emerge --unmerge gnome*" "=media-plugins/gst-plugins-opus" "x11-drivers/xf86-input-evdev" "gnome-base/gnome-settings-daemon" "dev-libs/libgweather" "gnome-base/gnome-control-center" "x11-base/xorg-server" "emerge --ask --oneshot " "x11-drivers/xf86-input-synaptics" "gnome-light" "gdm" "gnome-control-cent\ner" "x11-wm/mutter" "libgweather" "gnome-settings-daemon" "gnome-control-center" "gnome-control-center" "emerge -uDN world --reinstall-atoms " " Multiple package instances within a single package slot have been pulled\n!!! into the dependency graph, resulting in a slot conflict:" "sys-process/procps" "dev-libs/libgweather" "https://wiki.gentoo.org/wiki/Handbook:X86/Working/Portage#Blocked_packages\n" "’ÏÀ’Ê¸’¥¿’¥¤’¥È’¥ë" "#+TITLE: ’ÏÀ’Ê¸’¥¿’¥¤’¥È’¥ë\n#+AUTHOR: ’Ì¾’Á°\n#+LATEX_CLASS: thesis\n#+OPTIONS: toc:nil timestamp:nil" "(add-to-list 'org-latex-classes\n             '(\"thesis\"\n               \"\\\\documentclass{jarticle}\n                [NO-PACKAGES]\n                [NO-DEFAULT-PACKAGES]\n                \\\\usepackage[dvipdfmx]{graphicx}\"\n               (\"\\\\section{%s}\" . \"\\\\section*{%s}\")\n               (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")\n               (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")\n               (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\")\n               (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))" "(require 'ox-latex)\n(require 'ox-bibtex)\n\n;;; LaTeX ’·Á’¼°’¤Î’¥Õ’¥¡’¥¤’¥ë PDF ’¤Ë’ÊÑ’´¹’¤¹’¤ë’¤¿’¤á’¤Î’¥³’¥Þ’¥ó’¥É\n(setq org-latex-pdf-process\n      '(\"platex %f\"\n        \"platex %f\"\n        \"bibtex %b\"\n        \"platex %f\"\n        \"platex %f\"\n        \"dvipdfmx %b.dvi\"))\n\n;;; \\hypersetup{...} ’¤ò’½Ð’ÎÏ’¤·’¤Ê’¤¤\n(setq org-latex-with-hyperref nil)" "org-plus-contrib" " git config --global user.email " " Gentoo Linux’¤ò’Æþ’¤ì’¤è’¤¦" "’¤¦" "https://gitlab.com/npca/bushi2019.git"))
(setq desktop-missing-file-warning nil)
(setq tags-file-name nil)
(setq tags-table-list nil)
(setq search-ring nil)
(setq regexp-search-ring '("go" "kill" "wa" "way" "\\(org-\\).*?\\(contr\\)" "org-plus" "fon" "#"))
(setq register-alist nil)
(setq file-name-history '("/home/linguini/bushi2019/install-latest-widevine-for-vivaldi" "/home/linguini/.emacs.d/" "/var/tmp/portage/net-wireless/gnome-bluetooth-3.20.1/temp/" "/var/tmp/portage/net-wireless/gnome-bluetooth-3.20.1/build-info/" "/etc/portage/make.conf" "/etc/portage/package.use/zz-autounmask" "/etc/portage/package.accept_keywords" "/etc/portage/make.conf" "/home/linguini/.emacs.d/init.el" "/etc/portage/package.use/zz-autounmask" "/etc/portage/make.conf" "/etc/portage/package.use/zz-autounmask" "/sudo:root@linguini-gentoo:/sudo:root@linguini-gentoo:/etc/portage/" "/etc/portage/package.use/zz-autounmask" "/etc/portage/make.conf" "/usr/share/fonts/" "/etc/fonts/" "/etc/fonts/fonts.conf" "/home/linguini/bushi2019/" "/home/linguini/bushi2019/sample/" "/home/linguini/bushi2019/sample/linguini.org" "/home/linguini/.xprofile" "/home/linguini/" "/usr/share/emacs/site-lisp/ddskk/" "/home/linguini/.emacs.d/elpa/ddskk-20180707.532/" "/usr/share/emacs/site-lisp/ddskk/context-skk.el" "/usr/share/skk/" "/home/linguini/.emacs.d/elpa/ddskk-20180707.532/context-skk.el" "/home/linguini/.emacs.d/elpa/"))
(setq kill-ring-yank-pointer (nthcdr 0 kill-ring))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 208
  "/home/linguini/.emacs.d/elpa/org-plus-contrib-20181029/org-loaddefs.el"
  "org-loaddefs.el"
  'emacs-lisp-mode
  '(eldoc-mode company-mode undo-tree-mode ivy-mode counsel-mode smartparens-mode which-key-mode context-skk-mode auto-sudoedit-mode override-global-mode)
  101354
  '(101353 t)
  nil
  nil
  '((buffer-display-time 23512 26184 372820 254000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (100916 100916 101262 101353))))

(desktop-create-buffer 208
  "/home/linguini/bushi2019/sample/linguini.org"
  "linguini.org"
  'org-mode
  '(company-mode undo-tree-mode ivy-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode context-skk-mode auto-sudoedit-mode override-global-mode)
  631
  '(631 nil)
  nil
  nil
  '((buffer-display-time 23512 24505 973035 791000) (buffer-file-coding-system . utf-8-unix) (overwrite-mode) (truncate-lines . t))
  '((mark-ring (631 631 617 1 1 165 618 617 618 618 618 618 144 144 571 631))))

(desktop-create-buffer 208
  "/home/linguini/.emacs.d/init.el"
  "init.el"
  'emacs-lisp-mode
  '(eldoc-mode company-mode undo-tree-mode ivy-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode override-global-mode)
  7967
  '(2373 nil)
  nil
  nil
  '((buffer-display-time 23512 17396 114897 185000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (2374 2748 3288 2447 2429 2410 4726 1137 11107 1 11107 1 11107 6045 11107 3419))))

(desktop-create-buffer 208
  nil
  "ddskk"
  'dired-mode
  '(company-mode ivy-mode counsel-mode which-key-mode context-skk-mode auto-sudoedit-mode override-global-mode)
  3864
  '(3864 t)
  t
  '("/usr/share/emacs/site-lisp/ddskk/")
  '((buffer-display-time 23512 4847 796128 649000))
  '((mark-ring (3864 3864 3864 3864))))

(desktop-create-buffer 208
  nil
  "fonts"
  'dired-mode
  '(company-mode ivy-mode counsel-mode which-key-mode context-skk-mode auto-sudoedit-mode override-global-mode)
  602
  '(nil nil)
  t
  '("/usr/share/fonts/")
  '((buffer-display-time 23512 3091 120096 960000))
  '((mark-ring nil)))

(desktop-create-buffer 208
  nil
  "fonts"
  'dired-mode
  '(company-mode ivy-mode counsel-mode which-key-mode context-skk-mode auto-sudoedit-mode override-global-mode)
  375
  '(nil nil)
  t
  '("/etc/fonts/")
  '((buffer-display-time 23512 3063 283952 849000))
  '((mark-ring nil)))

(desktop-create-buffer 208
  nil
  "ddskk-20180707.532"
  'dired-mode
  '(company-mode ivy-mode counsel-mode which-key-mode context-skk-mode auto-sudoedit-mode override-global-mode)
  3348
  '(2698 nil)
  t
  '("/home/linguini/.emacs.d/elpa/ddskk-20180707.532/")
  '((buffer-display-time 23512 3034 483262 789000))
  '((mark-ring (852 243 852 3281 983 2698 3348 3089 3348 3348))))

(desktop-create-buffer 208
  "/usr/share/emacs/26.1/lisp/loaddefs.el"
  "loaddefs.el"
  'emacs-lisp-mode
  '(eldoc-mode company-mode undo-tree-mode ivy-mode counsel-mode smartparens-mode which-key-mode context-skk-mode auto-sudoedit-mode override-global-mode)
  918268
  '(nil nil)
  t
  nil
  '((buffer-display-time) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring nil)))

