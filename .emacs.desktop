;; -*- mode: emacs-lisp; coding: emacs-mule; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Sun Jan  6 15:18:08 2019
;; Desktop file format version 208
;; Emacs version 26.1

;; Global section:
(setq desktop-saved-frameset [frameset 1 (23601 40352 306407 354000) (desktop . "208") "linguini@arch-linguini" nil nil ((((minibuffer . t) (undecorated) (override-redirect) (font-backend xft x) (font . "-CYRE-Inconsolata-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1") (font-parameter) (border-width . 0) (internal-border-width . 0) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#c6c6c6") (background-color . "#303030") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 1) (right-fringe . 1) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 1) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 0) (scroll-bar-height . 0) (alpha) (no-focus-on-map) (no-accept-focus) (fullscreen . fullboth) (visibility . t) (skip-taskbar) (z-group) (display-type . color) (background-mode . dark) (cursor-color . "#eeeeee") (powerline-cache) (sticky) (frameset--id . "389F-4D23-6852-89FA") (frameset--mini t) (height . 46) (width . 146) (modeline . t) (unsplittable) (left . 0) (top . 0) (icon-name) (display . ":0") (explicit-name)) ((min-height . 4) (min-width . 10) (min-height-ignore . 2) (min-width-ignore . 3) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 64) (min-pixel-width . 70) (min-pixel-height-ignore . 32) (min-pixel-width-ignore . 21) (min-pixel-height-safe . 16) (min-pixel-width-safe . 14)) leaf (pixel-width . 1024) (pixel-height . 720) (total-width . 146) (total-height . 45) (normal-height . 1.0) (normal-width . 1.0) (buffer "init.el" (selected) (hscroll . 0) (fringes 1 1 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 9604) (start . 9318))) (((minibuffer . t) (undecorated) (override-redirect) (font-backend xft x) (font . "-CYRE-Inconsolata-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1") (font-parameter) (border-width . 0) (internal-border-width . 0) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#c6c6c6") (background-color . "#303030") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 1) (right-fringe . 1) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 1) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 0) (scroll-bar-height . 0) (alpha) (no-focus-on-map) (no-accept-focus) (fullscreen . fullboth) (visibility . t) (skip-taskbar) (z-group) (display-type . color) (background-mode . dark) (cursor-color . "#eeeeee") (powerline-cache) (sticky) (frameset--id . "F767-D769-C7F0-3C1C") (frameset--mini t) (height . 65) (width . 274) (modeline . t) (unsplittable) (left . 1024) (top . 1080) (icon-name) (display . ":0") (explicit-name)) ((min-height . 8) (min-width . 20) (min-height-ignore . 4) (min-width-ignore . 5) (min-height-safe . 2) (min-width-safe . 4) (min-pixel-height . 128) (min-pixel-width . 140) (min-pixel-height-ignore . 64) (min-pixel-width-ignore . 35) (min-pixel-height-safe . 32) (min-pixel-width-safe . 28)) hc (pixel-width . 1920) (pixel-height . 1036) (total-width . 274) (total-height . 65) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 961) (pixel-height . 1036) (total-width . 137) (total-height . 65) (normal-height . 1.0) (normal-width . 0.5) (buffer " GitKraken" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 nil nil 0 t) (vscroll . 0) (dedicated) (point . 1) (start . 1))) (vc (last . t) (pixel-width . 959) (pixel-height . 1036) (total-width . 137) (total-height . 65) (normal-height . 1.0) (normal-width . 0.5) (combination-limit) (leaf (pixel-width . 959) (pixel-height . 767) (total-width . 137) (total-height . 48) (normal-height . 0.7375609756097561) (normal-width . 1.0) (buffer "init.el" (selected) (hscroll . 0) (fringes 1 1 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 10102) (start . 9821))) (leaf (last . t) (pixel-width . 959) (pixel-height . 269) (total-width . 137) (total-height . 17) (normal-height . 0.2624390243902439) (normal-width . 1.0) (buffer " fish  /home/linguini/Desktop" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 nil nil 0 t) (vscroll . 0) (dedicated) (point . 1) (start . 1))))) (((minibuffer . t) (undecorated) (override-redirect) (font-backend xft x) (font . "-CYRE-Inconsolata-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1") (font-parameter) (border-width . 0) (internal-border-width . 0) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#c6c6c6") (background-color . "#303030") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 1) (right-fringe . 1) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 1) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 0) (scroll-bar-height . 0) (alpha) (no-focus-on-map) (no-accept-focus) (fullscreen . fullboth) (visibility . t) (skip-taskbar) (z-group) (display-type . color) (background-mode . dark) (cursor-color . "#eeeeee") (powerline-cache) (sticky) (frameset--id . "314F-CAEB-6A2F-F853") (frameset--mini t . t) (modeline . t) (unsplittable) (icon-name) (display . ":0") (explicit-name) (height . 64) (width . 274) (left . 1024) (top . 26)) ((min-height . 8) (min-width . 20) (min-height-ignore . 4) (min-width-ignore . 4) (min-height-safe . 2) (min-width-safe . 4) (min-pixel-height . 128) (min-pixel-width . 140) (min-pixel-height-ignore . 64) (min-pixel-width-ignore . 28) (min-pixel-height-safe . 32) (min-pixel-width-safe . 28)) hc (pixel-width . 1920) (pixel-height . 1008) (total-width . 274) (total-height . 63) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 961) (pixel-height . 1008) (total-width . 137) (total-height . 63) (normal-height . 1.0) (normal-width . 0.5) (buffer "TweetDeck - Vivaldi" (selected . t) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 nil nil 0 t) (vscroll . 0) (dedicated) (point . 1) (start . 1))) (vc (last . t) (pixel-width . 959) (pixel-height . 1008) (total-width . 137) (total-height . 63) (normal-height . 1.0) (normal-width . 0.5) (combination-limit) (leaf (pixel-width . 959) (pixel-height . 496) (total-width . 137) (total-height . 31) (normal-height . 0.5) (normal-width . 1.0) (buffer "GNOME ALSA Mixer" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 nil nil 0 t) (vscroll . 0) (dedicated) (point . 1) (start . 1))) (leaf (last . t) (pixel-width . 959) (pixel-height . 512) (total-width . 137) (total-height . 32) (normal-height . 0.5) (normal-width . 1.0) (buffer "Slack - NCAS" (selected) (hscroll . 0) (fringes 0 0 nil) (margins nil) (scroll-bars nil 0 nil nil 0 t) (vscroll . 0) (dedicated) (point . 1) (start . 1))))))])
(setq kill-ring '("((\n   sldfslkdflksj))" "defn a\n   \"the thing\" " "end)))\n(fizzbuzz -10 10)" "\222\244\325 \222\244\250)(\222\244\325 \222\244\250)(\222\244\325 \222\244\250)(\222\244\325 \222\244\250)(\222\244\325 \222\244\250)" "(\222\244\325 \222\244\250)" "(\222\244\325 \222\244\250)" "(let ((\222\244\242 (lambda (\222\244\325 \222\244\250) (\222\244\325 \222\244\250 \222\244\250)))) (\222\244\242 \222\244\242 \222\244\242))" "(fn nth-fibo [number]\n  (loop [num 1\n         number number]\n      (if (= number 0)\n        1\n        (recur (- num 1) number \n" "(nth-fibo 1)" "FIXME: " "def :else" "(in-ns cider.nrepl.middleware.debug)\n(defmacro breakpoint-implementation [form {:keys [coor]} original-form]\n  (let [val-form (cider.nrepl.middleware.util.meta/strip-meta\n                  (if (looks-step-innable? form)\n                    (let [[fn-sym & args] form]\n                      ;; Evaluate args first, delaying the decision of whether or\n                      ;; not to step in until the last possible moment.\n                      `(let [args# [~@args]\n                             step-in?# (step-in? (var ~fn-sym) ~coor)]\n                         (apply (if step-in?#\n                                  (::instrumented (meta (var ~fn-sym)))\n                                  ~fn-sym)\n                                args#)))\n                    form))]\n    `(let [val# ~val-form]\n       (cond\n         (skip-breaks? ~coor) val#\n         ;; The length of `coor` is a good indicator of current code\n         ;; depth.\n         (= (:mode @*skip-breaks*) :trace)\n         (do (print-step-indented ~(count coor) '~(cider.nrepl.middleware.util.meta/strip-meta original-form) val#)\n             val#)\n         ;; Nothing special. Here's the actual breakpoint logic.\n         :else                (->> (pr-short val#)\n                                   (assoc *extras* :debug-value)\n                                   (read-debug-command val#))))))" " ;FIXME" "    (def a (+ a 1))" "a)))\n\n(fizzbuzz 1 5)" "default-data-reader-fn*" "(*default-data-reader-fn*" "(*default-data-reader-fn*" "(def a 5)" ":private" ":private " "doc *default-data-reader-fn*" "*default-data-reader-fn*" "compile-path*" "(*default-data-reader-fn*" "(*default-data-reader-fn*" "(*default-data-reader-fn*" "(*default-data-reader-fn*" "if (= a " "chunked-" "FIXM" "reset-met" "reset-met" "(require '\222\244\252\222\273\234\363\254\304\267.core :reload)" "a b c]" "#{:a\n  [1 2 3]\n  {:foo 11 :bar 12}\n  #{\"shirt\" \"coat\" \"hat\"}}" "doc doc)" "(use-package cider\n  :init\n  (add-hook 'cider-mode-hook #'clj-refactor-mode)\n  (add-hook 'cider-mode-hook #'company-mode)\n  (add-hook 'cider-mode-hook #'eldoc-mode)\n  (add-hook 'cider-repl-mode-hook #'company-mode)\n  (add-hook 'cider-repl-mode-hook #'eldoc-mode)\n  :diminish subword-mode\n  :config\n  (setq nrepl-log-messages t\n        cider-repl-display-in-current-window t\n        cider-repl-use-clojure-font-lock t\n        cider-prompt-save-file-on-load 'always-save\n        cider-font-lock-dynamically '(macro core function var)\n        cider-overlays-use-font-lock t)\n  (cider-repl-toggle-pretty-printing))" "https://github.com/remvee/elein" "mode" "CIDER\nclj-refactor" "Clojure Mode" "show-invisibles-ov" "\n;; Copyright (C) 2013- zk_phi" ".																	\222\244\242" "																	\222\244\242" "https://github.com/daichirata/emacs-rotate" "pcre-to-elisp \"^ +| +$|\\t +| +\\t\"" "\n(defcustom invisibles-to-show (pcre-to-elisp \"^ +| +$|\\t +| +\\t\")\n  \"\"\n  :type 'string\n  :group 'make-char-visible)\n" "char-to-visualize" "invisible" "invisible-to-show" "chars other than the invisible char to show" "my-whitespace" "space" "white" "white" "https://pbs.twimg.com/profile_images/953149886198833152/IK7-s5mk_bigger.jpg" "https://pbs.twimg.com/profile_images/953149886198833152/IK7-s5mk_bigger.jpg" ";; * customs"))
(setq desktop-missing-file-warning nil)
(setq tags-file-name nil)
(setq tags-table-list nil)
(setq search-ring '("def"))
(setq regexp-search-ring '("company" "sma" "py" "leinin" "yasni" "rotate" "bidi" "bidir" "simple" "emacs" "invisible-to" "invisibles-to" "invisibles-ind" "invisibles-to" "invisible" "hook"))
(setq register-alist (list (list 49 "Unprintable entity" (let ((mk (make-marker))) (add-hook 'desktop-delay-hook `(lambda nil (set-marker ,mk ,nil (get-buffer ," *temp*")))) mk)) (list 97 "Unprintable entity" (let ((mk (make-marker))) (add-hook 'desktop-delay-hook `(lambda nil (set-marker ,mk ,nil (get-buffer ," *temp*")))) mk)) (list 115 "Unprintable entity" (let ((mk (make-marker))) (add-hook 'desktop-delay-hook `(lambda nil (set-marker ,mk ,nil (get-buffer ," *temp*")))) mk)) (list 114 "Unprintable entity" (let ((mk (make-marker))) (add-hook 'desktop-delay-hook `(lambda nil (set-marker ,mk ,nil (get-buffer ," *temp*")))) mk))))
(setq file-name-history '("/home/linguini/.emacs.d/init.el" "/home/linguini/.emacs.d/elpa/lispy-20181210.1751/lispy-clojure.clj" "/home/linguini/.emacs.d/elpa/" "/home/linguini/.lein/" "/home/linguini/Desktop/clojure/\222\244\252\222\273\234\363\254\304\267/src/\222\244\252\222\273\234\363\254\304\267/core.clj" "/home/linguini/.local/" "/home/linguini/.emacs.d/mylisp/make-char-visible.el" "/usr/share/" "/home/linguini/.emacs.d/mylisp/my-whitespace.el" "/home/linguini/Desktop/icon.jpg" "/home/linguini/Desktop/" "/home/linguini/DEs" "/etc/" "/home/linguini/.emacs.d/elpa/indent-guide-20170221.1127/" "/home/linguini/.emacs.d/mylisp/.#whitespace.el" "/home/linguini/.emacs.d/mylisp/#whitespace.el#" "/home/linguini/.emacs.d/mylisp/" "/home/linguini/.emacs.d/mylisp/whitespace.el" "/usr/share/emacs/26.1/lisp/whitespace.el.gz" "/usr/share/emacs/26.1/lisp/progmodes/prog-mode.el.gz" "/home/linguini/.emacs.d/elpa/which-key-20181114.1432/" "/home/linguini/.emacs.d/elpa/m-buffer-20170407.2141/m-buffer.el" "/home/linguini/.emacs.d/elpa/m-buffer-20170407.2141/" "/usr/share/emacs/26.1/lisp/" "/sudo:root@arch-linguini:/usr/bin/" "/home/linguini/.emacs.d/init.el]" "/home/linguini/.emacs.d/elpa/lispy-20181210.1751/lispy.el" "/home/linguini/.emacs.d/elpa/lispy-20181210.1751/" "/home/linguini/.emacs.d/packages.el" "/home/linguini/.emacs.d/elpa/elisp-format-20160508.952/elisp-format.el" "/home/linguini/.emacs.d/elpa/switch-window-20181104.340/switch-window.el" "/home/linguini/.emacs.d/" "/home/linguini/.emacs.d/quelpa/" "/home/linguini/.emacs.d/el-get/" "/home/linguini/.xbindkeysrc" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/src/main.rs" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/src/main.rs" "/home/linguini/.emacs.d/session.106e12dee1604547f154061902440734200000061990091" "/home/linguini/.emacs.d/window" "/home/linguini/.Xmodmap" "/usr/share/keymaps/Caps2Ctrl.map" "/home/linguini/.emacs.d/.git/" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/src/" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/" "/home/linguini/Documents/" "/home/" "/home/linguini/.emacs.d/elpa/avy-20181126.1705/" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/src/main.rs" "/home/linguini/.emacs.d/elpa/adaptive-wrap-0.7/adaptive-wrap.elc" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/src/main.rs" "/home/linguini/.emacs.d/elpa/major-mode-icons-20170301.714/" "/home/linguini/.emacs.d/elisp/awesome-tray.el" "/home/linguini/.emacs.d/elisp" "/home/linguini/.emacs.d/elpa/awesome-tray.el" "/home/linguini/.emacs.d/elpa/awesome-tray/" "/home/linguini/.emacs.d/elpa/awesome-tray/awesome-tray.el" "/home/linguini/.emacs.d/elpa/counsel-20181223.325/" "/home/linguini/#.xinitrc#" "/home/linguini/.emacs.d/elpa/font-lock+.el" "/home/linguini/.emacs.d/init.el.html" "/home/linguini/.SpaceVim.d/" "/home/linguini/.SpaceVim/init.vim" "/usr/share/emacs/" "/usr/share/emacs/26.1/etc/images/icons/allout-widgets/dark-bg/" "/usr/share/emacs/26.1/etc/images/icons/" "/home/linguini/exwm-session.sh" "/usr/share/xsessions/" "/home/linguini/.emacs.d/elpa/ddskk-20181220.2002/ddskk-autoloads.el" "/home/linguini/.emacs.d/elpa/ddskk-20181220.2002/" "/home/linguini/.emacs.d/elpa/ddskk-20181220.2002/skk-tut.el" "/home/linguini/.emacs.d/elpa/ddskk-20181220.2002/context-skk.el" "/home/linguini/bushi2019/bushi/linguini.re" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/src/main.rs" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/src/main.rs" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/src/main.rs" "/home/linguini/.config/lariza/" "/sudo:root@arch-linguini:/home/linguini/exwm-session.sh" "/home/linguini/.xsession" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/Cargo.toml" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/Cargo.lock" "/home/linguini/.config/lariza/keywordsearch" "/home/linguini/.local/share/applications/" "/home/linguini/.emacs.d/elpa/exwm-edit-20180905.743/exwm-edit.el" "/home/linguini/Desktop/python/\222\244\252\222\273\234\363\254\304\267/main.py" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/src/main.rs" "/home/linguini/Desktop/rust/hello-world/src/main.rs" "/home/linguini/Desktop/rust/\222\244\252\222\273\234\363\254\304\267/" "/home/linguini/Desktop/rust/temp/src/main.rs" "/home/linguini/Desktop/rust/hello-world/Cargo.toml" "/home/linguini/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/" "/home/linguini/.rustup/" "/home/linguini/.cargo/bin/racer" "/home/linguini/.emacs.d/elpa/elpy-20181214.2233/" "/opt/" "/bin/" "/usr/lib/python3.7/site-packages/cefpython3/examples/hello_world.py" "/home/linguini/Downloads/" "/usr/lib/python3.7/site-packages/cefpython3/examples/qt.py"))
(setq kill-ring-yank-pointer (nthcdr 0 kill-ring))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 208
  "/home/linguini/.emacs.d/init.el"
  "init.el"
  'emacs-lisp-mode
  '(eldoc-mode company-mode yas-minor-mode auto-complete-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode lispy-mode auto-revert-mode magit-file-mode)
  9604
  '(19813 nil)
  nil
  nil
  '((buffer-display-time 23601 39743 51624 676000) (buffer-file-coding-system . utf-8-unix) (overwrite-mode))
  '((mark-ring (9756 9756 10744 5561 4706 2652 9584 2848 2520 1823 12929 50 1 6676 6783 6863))))

(desktop-create-buffer 208
  nil
  "*info*"
  'Info-mode
  '(company-mode yas-minor-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode)
  6215
  '(nil nil)
  t
  '("/home/linguini/.emacs.d/elpa/magit-popup-20181204.2031/magit-popup.info" "Usage" nil)
  '((tab-width . 8) (buffer-display-time 23601 38593 588006 177000) (buffer-file-coding-system . utf-8-unix) (case-fold-search . t))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/linguini/.emacs.d/packages.el"
  "packages.el"
  'emacs-lisp-mode
  '(eldoc-mode company-mode yas-minor-mode auto-complete-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode lispy-mode magit-file-mode)
  603
  '(796 nil)
  nil
  nil
  '((buffer-display-time 23600 32944 538363 112000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (796 796 464 373 561 762 762 768 768 2162 27 21 768 604 768 943))))

(desktop-create-buffer 208
  "/home/linguini/.emacs.d/mylisp/make-char-visible.el"
  "make-char-visible.el"
  'emacs-lisp-mode
  '(eldoc-mode company-mode yas-minor-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode magit-file-mode)
  1480
  '(1120 nil)
  t
  nil
  '((buffer-display-time 23600 13537 38974 907000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (1163 1294 1266 616 937 902 898 24 1649 1686 972 1295 1080 1418 1082 1480))))

(desktop-create-buffer 208
  "/home/linguini/.emacs.d/elpa/indent-guide-20170221.1127/indent-guide.el"
  "indent-guide.el"
  'emacs-lisp-mode
  '(eldoc-mode company-mode yas-minor-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode magit-file-mode)
  6384
  '(6384 t)
  nil
  nil
  '((buffer-display-time 23600 13149 370881 259000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (96 7518 7438 2709 2818 2709 12278 12239 12276 6115 2928 3771 1315 1291 4947 4225))))

(desktop-create-buffer 208
  "/home/linguini/.emacs.d/elpa/m-buffer-20170407.2141/m-buffer.el"
  "m-buffer.el"
  'emacs-lisp-mode
  '(eldoc-mode company-mode yas-minor-mode auto-complete-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode magit-file-mode)
  4247
  '(3359 nil)
  nil
  nil
  '((buffer-display-time 23595 42410 483740 593000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (3359 3358))))

(desktop-create-buffer 208
  "/home/linguini/.emacs.d/init.el.html"
  "init.el.html"
  'css-mode
  '(company-mode yas-minor-mode auto-complete-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode magit-file-mode)
  847
  '(146 nil)
  nil
  nil
  '((buffer-display-time 23591 43139 558793 856000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (1004 249 929 855 749 872 929 1270 249 301 343 1059 1036 1004 951 847))))

(desktop-create-buffer 208
  "/home/linguini/.emacs.d/elpa/counsel-20181223.325/counsel.el"
  "counsel.el"
  'emacs-lisp-mode
  '(eldoc-mode company-mode yas-minor-mode auto-complete-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode magit-file-mode)
  190099
  '(191257 nil)
  nil
  nil
  '((buffer-display-time 23591 46364 745360 21000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (191437 191404 191223 1 190099))))

(desktop-create-buffer 208
  "/home/linguini/.xsession"
  ".xsession"
  'sh-mode
  '(company-mode yas-minor-mode auto-complete-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode)
  961
  '(898 nil)
  nil
  nil
  '((buffer-display-time 23593 56446 430024 610000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (898 899 961 961 961 961 879 914 961 961))))

(desktop-create-buffer 208
  "/home/linguini/.emacs.d/elpa/org-plus-contrib-20181230/org-loaddefs.el"
  "org-loaddefs.el"
  'emacs-lisp-mode
  '(eldoc-mode company-mode yas-minor-mode auto-complete-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode magit-file-mode)
  131307
  '(nil nil)
  nil
  nil
  '((buffer-display-time 23595 52059 687309 988000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring nil)))

(desktop-create-buffer 208
  nil
  "Desktop"
  'dired-mode
  '(company-mode yas-minor-mode ivy-mode counsel-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode)
  509
  '(509 t)
  t
  '("/home/linguini/Desktop/")
  '((buffer-display-time 23598 10876 77827 627000))
  '((mark-ring (509))))

(desktop-create-buffer 208
  nil
  "share"
  'dired-mode
  '(company-mode yas-minor-mode ivy-mode counsel-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode)
  246
  '(nil nil)
  t
  '("/home/linguini/.local/share/")
  '((buffer-display-time 23600 13139 942697 391000))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/linguini/.emacs.d/elpa/lispy-20181210.1751/lispy-clojure.clj"
  "lispy-clojure.clj"
  'clojure-mode
  '(eldoc-mode company-mode cider-mode yas-minor-mode clj-refactor-mode ivy-mode indent-guide-mode undo-tree-mode counsel-mode smartparens-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode magit-file-mode)
  1
  '(nil nil)
  nil
  nil
  '((indent-tabs-mode) (buffer-display-time 23601 38632 43869 858000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring nil)))

(desktop-create-buffer 208
  nil
  "elpa"
  'dired-mode
  '(company-mode yas-minor-mode ivy-mode counsel-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode)
  247
  '(nil nil)
  t
  '("/home/linguini/.emacs.d/elpa/")
  '((buffer-display-time 23601 38710 79328 934000))
  '((mark-ring nil)))

(desktop-create-buffer 208
  nil
  ".saves-*"
  'dired-mode
  '(company-mode yas-minor-mode ivy-mode counsel-mode which-key-mode adaptive-wrap-prefix-mode rainbow-delimiters-mode auto-sudoedit-mode)
  278
  '(nil nil)
  t
  '("/home/linguini/.emacs.d/auto-save-list/.saves-*")
  '((buffer-display-time 23601 38813 938243 399000))
  '((mark-ring nil)))

