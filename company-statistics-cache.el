(setq company-statistics--scores #s(hash-table size 400 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("bool" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) ((:keyword "if") . 1) (rust-mode . 2) (nil . 2) ((:keyword "else") . 1)) "package-install" (((:file "/home/linguini/.emacs.d/packages.el") . 1)) "vector_ret" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) ((:keyword "let") . 1) (rust-mode . 2) (nil . 2) ((:keyword "in") . 1)) "usize" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 6) ((:symbol "num") . 3) ((:keyword "fn") . 5) (rust-mode . 6) (nil . 6) ((:keyword "in") . 1) ((:symbol "div") . 1)) "break" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:symbol "0=") . 1) ((:keyword "match") . 1) (rust-mode . 1) (nil . 1)) "rainbow" (((:file "/home/linguini/.emacs.d/packages.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 3) (nil . 3) ((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "if") . 1) ((:keyword "cond") . 1)) "Equal" (((:symbol "Ordering") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:symbol "secret_number") . 1) ((:keyword "match") . 1) (rust-mode . 1) (nil . 1)) "lightyellow" ((custom-new-theme-mode . 1) (nil . 1)) "Ordering" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:symbol "cmp") . 1) ((:keyword "match") . 1) (rust-mode . 1) (nil . 1)) "print!" (((:keyword "in") . 1)) "nth_fibo" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) (rust-mode . 1) (nil . 1)) "nth" ((nil . 1)) "println!" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) (rust-mode . 1) (nil . 1)) "lambda" (((:file "/home/linguini/.emacs.d/init.el") . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 1) (nil . 1)) "tree" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "else") . 1) (rust-mode . 1) (nil . 1)) "square" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "let") . 1) (rust-mode . 1) (nil . 1)) "prime" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 4) ((:symbol "false") . 1) ((:keyword "false") . 1) (rust-mode . 4) (nil . 4) ((:keyword "enum") . 1) ((:keyword "fn") . 1) ((:symbol "nil") . 1) ((:keyword "match") . 1)) "setq-default" (((:file "/home/linguini/.emacs.d/init.el") . 1) (emacs-lisp-mode . 1) (nil . 1) ((:keyword "define-globalized-minor-mode") . 1)) "all-the-icons-ivy-setup" (((:file "/home/linguini/.emacs.d/init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "vector" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 11) ((:keyword "let") . 2) (rust-mode . 11) (nil . 11) ((:keyword "in") . 2) ((:symbol "1") . 1) ((:keyword "match") . 2) ((:keyword "false") . 1) ((:keyword "else") . 1) ((:keyword "break") . 1) ((:keyword "mut") . 1) ((:keyword "for") . 1)) "dark" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "sp-with-modes") . 1) (emacs-lisp-mode . 1) (nil . 1)) "vector_ret=vector" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:symbol "vector_ret=vector") . 1) ((:keyword "let") . 1) (rust-mode . 1) (nil . 1)) "primes_vec=vec" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:symbol "3") . 1) ((:keyword "let") . 1) (rust-mode . 1) (nil . 1)) "new_vec" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 3) ((:keyword "match") . 2) (rust-mode . 3) (nil . 3) ((:symbol "nil") . 1) ((:keyword "let") . 1)) "range" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "let") . 1) (rust-mode . 1) (nil . 1)) "push" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 5) ((:symbol "vector") . 2) ((:keyword "mut") . 1) (rust-mode . 5) (nil . 5) ((:keyword "let") . 1) ((:symbol "vector_ret") . 3) ((:keyword "in") . 3)) "match" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) (rust-mode . 2) (nil . 3) ((:keyword "in") . 2) ((:keyword "continue") . 1) (Custom-mode . 1)) "append" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:symbol "vector") . 1) ((:keyword "let") . 1) (rust-mode . 1) (nil . 1)) "vector_naxt" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) ((:keyword "let") . 2) (rust-mode . 2) (nil . 2)) "vmode" (((:file "/home/linguini/.Xmodmap") . 1) (fundamental-mode . 1) (nil . 1)) "number_vec" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) ((:keyword "let") . 2) (rust-mode . 2) (nil . 2)) "println" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 10) ((:keyword "let") . 5) (rust-mode . 10) (nil . 10) ((:keyword "in") . 3) ((:keyword "break") . 1) ((:keyword "match") . 1) ((:keyword "doc") . 1) ((:keyword "if") . 4)) "vector_next" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) ((:keyword "in") . 2) (rust-mode . 2) (nil . 2) ((:symbol "1") . 1)) "continue" (((:symbol "_=") . 1) ((:keyword "match") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) (rust-mode . 1) (nil . 2) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:symbol "else") . 1) ((:keyword "else") . 1) (nim-mode . 1)) "primes_vec" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "if") . 1) (rust-mode . 1) (nil . 1)) "primes" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) ((:keyword "in") . 1) (rust-mode . 2) (nil . 2) ((:keyword "if") . 1)) "set-face-attribute" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2) ((:keyword "if") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "deftheme") . 1)) "linum-light" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "quote") . 1) (emacs-lisp-mode . 9) (nil . 9) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark.el") . 1) ((:keyword "let") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 7) ((:keyword "ignore-errors") . 7)) "counsel" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "require") . 1) (emacs-lisp-mode . 1) (nil . 1)) "my-moe-dark" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "require") . 2) (emacs-lisp-mode . 2) (nil . 2)) "bold" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "highlight-indent-guides" (((:file "/home/linguini/.emacs.d/init.el") . 3) ((:keyword "interactive") . 1) (emacs-lisp-mode . 5) (nil . 5) ((:keyword "require") . 3) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2) ((:keyword "deftheme") . 1)) "el-get-bundle" (((:keyword "el-get-bundle") . 1) ((:file "/home/linguini/.emacs.d/packages.el") . 1) ((:keyword "defvar") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.emacs.d/packages.el" (((:keyword "sp-with-modes") . 1) ((:keyword "setq") . 1)) "procCall" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:keyword "return") . 1) (nim-mode . 1) (nil . 1)) "highlight-indent-guides-method" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "rainbow-indent-highlighter" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "if") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "defun") . 1)) "highlight-indent-guides-auto-top-character-face-perc" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "display" (((:file "/home/linguini/.emacs.d/init.el") . 3) ((:keyword "if") . 2) (emacs-lisp-mode . 3) (nil . 3) ((:keyword "defun") . 1)) "rainbow-indent-highlighter-char" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "character" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "highlight-indent-guides--highlighter-default" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "accumulator" (((:file "/home/linguini/Desktop/clojure/お試し/src/お試し/core.clj") . 1) (clojure-mode . 1) (nil . 1)) ":type" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "defcustom") . 2) (emacs-lisp-mode . 2) (nil . 2)) "nth-fibo" (((:keyword "recur") . 1)) "number" ((nil . 4) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 4) ((:keyword "fn") . 1) (rust-mode . 4) ((:keyword "match") . 1) ((:keyword "if") . 2) ((:symbol "divider") . 1) ((:symbol "nil") . 1)) "recur" ((nil . 3) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) (rust-mode . 2) ((:keyword "else") . 2) ((:keyword "fn") . 1) ((:keyword "let") . 1)) "fibo1" (((:keyword "recur") . 1)) "fibo2" (((:file "/home/linguini/Desktop/clojure/お試し/src/お試し/core.clj") . 1) (clojure-mode . 1) (nil . 1)) "rainbow-delimiters-max-face-count" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "if") . 2) (emacs-lisp-mode . 2) (nil . 2)) "faces" ((Custom-mode . 1) (nil . 1)) "fibo-atom" (((:file "/home/linguini/Desktop/clojure/お試し/src/お試し/core.clj") . 1) ((:keyword "if") . 1) (clojure-mode . 1) (nil . 1)) "line" ((Custom-mode . 1) (cider-repl-mode . 1)) "procr" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:keyword "return") . 1) (nim-mode . 1) (nil . 1)) "case" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 4) ((:keyword "proc") . 1) (nim-mode . 4) (nil . 4) ((:keyword "in") . 2) ((:keyword "continue") . 1)) "foreground" ((snippet-mode . 2) (nil . 3) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1)) "start" (((:keyword "save-excursion") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "lambda") . 1)) "false" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 2) ((:keyword "case") . 1) (nim-mode . 2) (nil . 2) ((:keyword "return") . 1)) "replace" (((:keyword "save-excursion") . 1) (emacs-lisp-mode . 1) (nil . 1)) "primeBool" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 4) ((:keyword "else") . 1) (nim-mode . 4) (nil . 4) ((:keyword "continue") . 1) ((:symbol "i") . 2) ((:keyword "if") . 2)) "regexp" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "stdout" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:keyword "in") . 1) (nim-mode . 1) (nil . 1)) "write" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:symbol "stdout") . 1) ((:keyword "in") . 1) (nim-mode . 1) (nil . 1)) "~/.emacs.d/themes/my-moe-dark-theme.el" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ultra" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":with" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "echo" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:keyword "if") . 1) (nim-mode . 1) (nil . 1)) "dispose" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:keyword "else") . 1) (nim-mode . 1) (nil . 1)) "i" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:keyword "if") . 1) (nim-mode . 1) (nil . 1)) ":inverse-video" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ff4b4b" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "right" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) "prime_bool" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "if") . 1) (rust-mode . 1) (nil . 1)) "list" ((Custom-mode . 1) (nil . 1)) "packages" ((Custom-mode . 1) (nil . 1)) "require" (((:file "/home/linguini/.emacs.d/init.el") . 5) (emacs-lisp-mode . 6) (nil . 6) ((:keyword "sp-with-modes") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) ((:keyword "setq") . 2) ((:keyword "or") . 1) ((:keyword "require") . 1)) "when" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:keyword "import") . 1) (nim-mode . 1) (nil . 1)) "sleep" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:keyword "defer") . 1) (nim-mode . 1) (nil . 1)) ":foreground" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 7) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 7) (nil . 7) ((:keyword "if") . 3) ((:keyword "ignore-errors") . 2) ((:keyword "set-face-attribute!") . 1)) "highlight-indent-guides-top-character-face" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "global-map" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "general" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "main" (((:symbol "main") . 1)) "afd7ff" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "world" ((nil . 1)) ":weight" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 3) ((:keyword "deftheme") . 2) (emacs-lisp-mode . 6) (nil . 6) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme2.el") . 3) ((:keyword "setq") . 3)) ":background" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 4) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 4) (nil . 4) ((:keyword "ignore-errors") . 3)) ":inherit" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 6) ((:keyword "deftheme") . 2) (emacs-lisp-mode . 6) (nil . 6) ((:keyword "if") . 1) ((:keyword "ignore-errors") . 3)) "printf" (((:file "/home/linguini/Desktop/C/お試し/main.c") . 1) (c-mode . 1) (nil . 1)) "hl-stipple" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2) ((:keyword "if") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "dotimes") . 1)) "dotimes" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":stipple" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2) ((:keyword "dotimes") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "deftheme") . 1)) "c-mode-common-hook" (((:file "/home/linguini/.emacs.d/init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "f0f0f0" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "save-buffer" (((:keyword "interactive") . 1)) "clang-format" (((:file "/home/linguini/.emacs.d/init.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "interactive" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) "yellow-2" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "let") . 1) (emacs-lisp-mode . 1) (nil . 1)) "indent" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "require") . 1) (emacs-lisp-mode . 1) (nil . 1)) "stdio" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "use") . 1) (rust-mode . 1) (nil . 1)) "regexp-search-ring" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "let" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) (rust-mode . 2) (nil . 2) ((:keyword "true") . 1) ((:keyword "mut") . 1) ((:keyword "break") . 1) ((:keyword "let") . 1)) "hight" (((:keyword "let") . 1)) "width" (((:symbol "self") . 1) ((:keyword "self") . 1) ((:symbol "rect1") . 1) ((:keyword "let") . 1) ((:keyword "mut") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "struct") . 1) (rust-mode . 1) (nil . 1)) "package" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme2.el") . 1) (emacs-lisp-mode . 1) (nil . 1)) "if" ((nil . 5) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 5) ((:keyword "else") . 3) (rust-mode . 5) ((:keyword "fn") . 2)) "string" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) (rust-mode . 1)) "from" (((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:symbol "String") . 1) ((:keyword "fn") . 1) (rust-mode . 1) (nil . 1)) "left" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "fringe-mode" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "return" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) (rust-mode . 1) (nil . 2) ((:symbol "0=") . 1) ((:keyword "match") . 1) ((:symbol "3") . 1) ((:keyword ":") . 1) (snippet-mode . 1)) "sum_range" (((:symbol "true") . 1) ((:keyword "true") . 1) ((:keyword "fn") . 1)) "window" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "diff-hl" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "require") . 1) (emacs-lisp-mode . 1) (nil . 1)) "for" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 4) (rust-mode . 4) (nil . 6) ((:keyword "let") . 3) ((:keyword "mut") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 2) ((:keyword "case") . 1) (nim-mode . 2) ((:keyword "return") . 1)) "maximum" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "match") . 1) (rust-mode . 1) (nil . 1)) "fringe" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2) ((:keyword "ignore-errors") . 2) (emacs-lisp-mode . 2) (nil . 2)) "mode-line" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "true" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) ((:keyword "match") . 1) (rust-mode . 2) (nil . 3) ((:keyword "enum") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1) ((:keyword "return") . 1) (nim-mode . 1)) "red-00" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "red-2" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 3) ((:keyword "ignore-errors") . 3) (emacs-lisp-mode . 3) (nil . 3)) "red-1" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "orange-00" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "fn" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 5) ((:keyword "true") . 3) (rust-mode . 5) (nil . 5) ((:keyword "self") . 1) ((:keyword "false") . 1) ((:keyword "mut") . 1)) "red1" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "red4" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2) ((:keyword "ignore-errors") . 2) (emacs-lisp-mode . 2) (nil . 2)) "width1" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "let") . 1) (rust-mode . 1) (nil . 1)) "white-1" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "let") . 1) (emacs-lisp-mode . 1) (nil . 1)) "struct" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) (rust-mode . 2) (nil . 2) ((:keyword "false") . 1) ((:keyword "struct") . 1)) "height" (((:symbol "self") . 1) ((:keyword "self") . 3) ((:symbol "other") . 2) ((:symbol "nil") . 1) ((:keyword "fn") . 1) ((:keyword "struct") . 1)) "Rectangle" (((:symbol "nil") . 1) ((:keyword "fn") . 2) ((:symbol "other") . 1) ((:keyword "self") . 1)) "exwm-enable" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "impl" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) (rust-mode . 2) (nil . 2) ((:keyword "false") . 1) ((:keyword "enum") . 1)) "self" (((:keyword "self") . 3) ((:symbol "width") . 1)) "other" (((:symbol "width") . 1)) "can_it_hold" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "let") . 1) (rust-mode . 1) (nil . 1)) "side" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 3) ((:keyword "fn") . 3) (rust-mode . 3) (nil . 3) ((:symbol "side") . 1)) "square1=" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:symbol "Rectangle") . 1) ((:keyword "let") . 1) (rust-mode . 1) (nil . 1)) "enum" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 3) ((:keyword "fn") . 1) (rust-mode . 3) (nil . 3) ((:keyword "false") . 1) ((:keyword "true") . 1)) "derive" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "fn") . 1) (rust-mode . 1) (nil . 1)) "ipamincho" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "japanese-fonts" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "divider" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 7) ((:symbol "usize") . 1) ((:keyword "fn") . 1) (rust-mode . 7) (nil . 7) ((:keyword "match") . 4) ((:symbol "nil") . 1) ((:keyword "true") . 1) ((:symbol "number") . 2) ((:keyword "if") . 1)) "is_it_prime" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 12) ((:keyword "match") . 1) (rust-mode . 12) (nil . 12) ((:symbol "nil") . 1) ((:keyword "true") . 2) ((:keyword "let") . 1) ((:keyword "if") . 2) ((:keyword "fn") . 1) ((:keyword "else") . 1) ((:keyword "in") . 1) ((:keyword "enum") . 1) ((:keyword "struct") . 1) ((:keyword "impl") . 1)) "else" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2) ((:keyword "true") . 1) (rust-mode . 2) (nil . 2) ((:keyword "else") . 1)) "is_it_prime2" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "else") . 1) (rust-mode . 1) (nil . 1)) "fnr" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 3) ((:keyword "true") . 1) (rust-mode . 3) (nil . 3) ((:keyword "fn") . 1) ((:keyword "impl") . 1)) "desktop" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "with-eval-after-load") . 1) (emacs-lisp-mode . 1) (nil . 1)) "moe-theme" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "quote") . 1) (emacs-lisp-mode . 1) (nil . 1)) "linum-dark" (((:file "/home/linguini/.emacs.d/init.el") . 3) ((:keyword "quote") . 2) (emacs-lisp-mode . 10) (nil . 10) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark.el") . 1) ((:keyword "let") . 1) ((:keyword "setq-default") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 6) ((:keyword "ignore-errors") . 6)) "secret_number" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "match") . 1) (rust-mode . 1) (nil . 1)) "delemeter-d1" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark.el") . 1) ((:keyword "let") . 1) (emacs-lisp-mode . 1) (nil . 1)) "delemeter-d2" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark.el") . 1) ((:keyword "let") . 1) (emacs-lisp-mode . 1) (nil . 1)) "delimiter" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark.el") . 1) ((:keyword "let") . 1) (emacs-lisp-mode . 1) (nil . 1)) "std" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "match") . 1) (rust-mode . 1) (nil . 1)) "~/.emacs.d/themes/my-moe-dark.el" (((:file "/home/linguini/.emacs.d/init.el") . 2) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "sp-with-modes") . 1)) "highlight-indentation" (((:file "/home/linguini/.emacs.d/packages.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1)) "load-file" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "sp-with-modes") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "lambda") . 1)) "yellow" ((custom-new-theme-mode . 1) (nil . 1)) "highlight-indent-guides-character-face" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "face" ((Custom-mode . 3) (nil . 3)) "light" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "variable-pitch" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "deftheme") . 1) (emacs-lisp-mode . 1) (nil . 1)) "highlight-indent-guides-responsive" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "provide" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "quote") . 1) (emacs-lisp-mode . 1) (nil . 1)) "responsive" (((:file "/home/linguini/.emacs.d/init.el") . 8) ((:keyword "defun") . 2) (emacs-lisp-mode . 8) (nil . 8) ((:keyword "cond") . 2) ((:keyword "if") . 3) ((:keyword "and") . 1)) "year" ((text-mode . 1) (nil . 1)) "rainbow-indent-highlighter-count" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "ignore-errors" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "sp-with-modes") . 2) (emacs-lisp-mode . 4) (nil . 4) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2) ((:keyword "set-face-attribute!") . 2)) "my-moe-dark-theme" (((:file "/home/linguini/.emacs.d/init.el") . 3) ((:keyword "require") . 3) (emacs-lisp-mode . 3) (nil . 3)) "bef1" (((:file "/home/linguini/Desktop/clojure/お試し/src/お試し/core.clj") . 1) ((:keyword "fn") . 1) (clojure-mode . 1) (nil . 1)) "rainbow-delimiters-outermost-only-face-count" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "if") . 1) (emacs-lisp-mode . 1) (nil . 1)) "adaptive-wrap-prefix-mode" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "proc" (((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 3) ((:keyword "return") . 3) (nim-mode . 3) (nil . 5) (snippet-mode . 2)) "readline" (((:keyword "doc") . 1) (cider-repl-mode . 1) (nil . 1)) "to-string" (((:keyword "save-excursion") . 1) (emacs-lisp-mode . 1) (nil . 1)) "white-3" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 4) ((:keyword "let") . 1) (emacs-lisp-mode . 4) (nil . 4) ((:keyword "ignore-errors") . 3)) "lisp" (((:file "/home/linguini/.emacs.d/packages.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "add-hook" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "linum" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "setq" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "linum-mode-hook" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "linum-format" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "diff-hl-mode" (((:file "/home/linguini/.emacs.d/init.el") . 4) ((:keyword "setq") . 2) (emacs-lisp-mode . 4) (nil . 4) ((:keyword "require") . 2)) "black-5" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "10000" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "fn") . 1) (rust-mode . 1) (nil . 1)) "black-2-5" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2) ((:keyword "ignore-errors") . 2) (emacs-lisp-mode . 2) (nil . 2)) "blue-2" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "blue-00" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "blue-6" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "cyan-3" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "cyan-0" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "orange-2" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "magenta-0" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "magenta-3" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "describe" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":color" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "white-0" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 6) ((:keyword "ignore-errors") . 4) (emacs-lisp-mode . 6) (nil . 6) ((:keyword "let") . 2)) "blue-0" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "orange-3" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "shell-command-to-string" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.screenlayout/" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.screenlayout/default.sh" (((:file "/home/linguini/.emacs.d/init.el") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "centered-cursor" (((:file "/home/linguini/.emacs.d/packages.el") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "exwm" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "exwm-randr" (((:file "/home/linguini/.emacs.d/init.el") . 2) ((:keyword "require") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "setq") . 1)) "black-4" (((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1) ((:keyword "ignore-errors") . 1) (emacs-lisp-mode . 1) (nil . 1)) "square1" (((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1) ((:keyword "let") . 1) (rust-mode . 1) (nil . 1)))) company-statistics--log [("self" (nil . 1) (rust-mode . 1) ((:keyword "self") . 3) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("width" (nil . 1) (rust-mode . 1) ((:keyword "self") . 1) ((:symbol "self") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("self" (nil . 1) (rust-mode . 1) ((:keyword "self") . 1) ((:symbol "width") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("height" (nil . 1) (rust-mode . 1) ((:keyword "self") . 3) ((:symbol "self") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("self" (nil . 1) (rust-mode . 1) ((:keyword "self") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("other" (nil . 1) (rust-mode . 1) ((:keyword "self") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("height" (nil . 1) (rust-mode . 1) ((:keyword "self") . 1) ((:symbol "other") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("other" (nil . 1) (rust-mode . 1) ((:keyword "self") . 1) ((:symbol "width") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("height" (nil . 1) (rust-mode . 1) ((:keyword "self") . 1) ((:symbol "other") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("can_it_hold" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("fn" (nil . 1) (rust-mode . 1) ((:keyword "self") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("Rectangle" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 2) ((:symbol "nil") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("Rectangle" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("side" (nil . 3) (rust-mode . 3) ((:keyword "fn") . 3) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 3)) ("height" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:symbol "nil") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("side" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("side" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:symbol "side") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("square" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("Rectangle" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("Rectangle" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("square1=" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:symbol "Rectangle") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("square1" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("enum" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("width" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:symbol "rect1") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("derive" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("ipamincho" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("japanese-fonts" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("japanese-fonts" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("fn" (nil . 1) (rust-mode . 1) ((:keyword "true") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("divider" (nil . 7) (rust-mode . 7) ((:keyword "fn") . 1) ((:symbol "usize") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 7)) ("match" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("divider" (nil . 1) (rust-mode . 1) ((:keyword "match") . 4) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("true" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("divider" (nil . 1) (rust-mode . 1) ((:keyword "true") . 1) ((:symbol "nil") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("divider" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:symbol "number") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 12) (rust-mode . 12) ((:keyword "match") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 12)) ("number" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("divider" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:symbol "number") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("divider" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "true") . 2) ((:symbol "nil") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("if" (nil . 1) (rust-mode . 5) ((:keyword "else") . 3) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 5)) ("else" (nil . 2) (rust-mode . 2) ((:keyword "true") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2)) ("if" (nil . 1) (rust-mode . 1) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "if") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "true") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("fn" (nil . 1) (rust-mode . 1) ((:keyword "true") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("if" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime2" (nil . 1) (rust-mode . 1) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("bool" (nil . 2) (rust-mode . 2) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2)) ("bool" (nil . 1) (rust-mode . 1) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("number" (nil . 1) (rust-mode . 1) ((:keyword "if") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("divider" (nil . 1) (rust-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("number" (nil . 1) (rust-mode . 1) ((:keyword "if") . 1) ((:symbol "divider") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("fn" (nil . 1) (rust-mode . 1) ((:keyword "true") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("fnr" (nil . 3) (rust-mode . 3) ((:keyword "true") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 3)) ("usize" (nil . 5) (rust-mode . 5) ((:keyword "fn") . 4) ((:symbol "num") . 3) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 5)) ("usize" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("match" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("break" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:symbol "0=") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("return" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:symbol "0=") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("for" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("fnr" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("usize" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:symbol "num") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("usize" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:symbol "div") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("if" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("recur" (nil . 1) (rust-mode . 1) ((:keyword "else") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("recur" (nil . 1) (rust-mode . 1) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("if" (nil . 1) (rust-mode . 1) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("else" (nil . 1) (rust-mode . 1) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("tree" (nil . 1) (rust-mode . 1) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("enum" (nil . 1) (rust-mode . 1) ((:keyword "false") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "enum") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("struct" (nil . 1) (rust-mode . 1) ((:keyword "false") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("impl" (nil . 1) (rust-mode . 1) ((:keyword "false") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("struct" (nil . 1) (rust-mode . 1) ((:keyword "struct") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "struct") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("recur" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("fn" (nil . 1) (rust-mode . 1) ((:keyword "false") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("usize" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:symbol "num") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("match" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("prime" (nil . 2) (rust-mode . 2) ((:keyword "false") . 1) ((:symbol "false") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2)) ("enum" (nil . 1) (rust-mode . 1) ((:keyword "true") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("true" (nil . 1) (rust-mode . 1) ((:keyword "enum") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("sum_range" (nil . 1) (rust-mode . 1) ((:keyword "true") . 1) ((:symbol "true") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("prime" (nil . 1) (rust-mode . 1) ((:keyword "enum") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("impl" (nil . 1) (rust-mode . 1) ((:keyword "enum") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("is_it_prime" (nil . 1) (rust-mode . 1) ((:keyword "impl") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("fnr" (nil . 1) (rust-mode . 1) ((:keyword "impl") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("let" (nil . 1) (rust-mode . 1) ((:keyword "true") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("for" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "in") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("prime" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("usize" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("match" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("number" (nil . 1) (rust-mode . 1) ((:keyword "fn") . 1) ((:symbol "nil") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("prime" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:symbol "nil") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("new_vec" (nil . 3) (rust-mode . 3) ((:keyword "match") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 3)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "match") . 2) ((:symbol "1") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("new_vec" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:symbol "nil") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("continue" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:symbol "_=") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "false") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "match") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector_naxt" (nil . 2) (rust-mode . 2) ((:keyword "let") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2)) ("let" (nil . 1) (rust-mode . 1) ((:keyword "mut") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector_naxt" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("append" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:symbol "vector") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("let" (nil . 1) (rust-mode . 1) ((:keyword "break") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("number_vec" (nil . 2) (rust-mode . 2) ((:keyword "let") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2)) ("number_vec" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("push" (nil . 5) (rust-mode . 5) ((:keyword "mut") . 1) ((:symbol "vector") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 5)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "break") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "break") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "mut") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("push" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:symbol "vector") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("for" (nil . 1) (rust-mode . 1) ((:keyword "mut") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "for") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector_next" (nil . 2) (rust-mode . 2) ((:keyword "in") . 2) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2)) ("vector_next" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:symbol "1") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("new_vec" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("range" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("primes_vec=vec" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:symbol "3") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector_ret=vector" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:symbol "vector_ret=vector") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector_ret" (nil . 2) (rust-mode . 2) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2)) ("for" (nil . 1) (rust-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("vector_ret" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("push" (nil . 1) (rust-mode . 1) ((:keyword "in") . 3) ((:symbol "vector_ret") . 3) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("push" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:symbol "vector_ret") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("push" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:symbol "vector_ret") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("primes" (nil . 2) (rust-mode . 2) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 2)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("primes" (nil . 1) (rust-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("primes_vec" (nil . 1) (rust-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("desktop" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "with-eval-after-load") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("moe-theme" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "quote") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("linum-dark" (nil . 4) (emacs-lisp-mode . 4) ((:keyword "quote") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 3)) ("linum-light" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "quote") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("linum-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "quote") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("delemeter-d1" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark.el") . 1)) ("delemeter-d2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark.el") . 1)) ("delimiter" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark.el") . 1)) ("~/.emacs.d/themes/my-moe-dark.el" (nil . 2) (emacs-lisp-mode . 2) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("load-file" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "sp-with-modes") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("~/.emacs.d/packages.el" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "sp-with-modes") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("~/.emacs.d/themes/my-moe-dark.el" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "sp-with-modes") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("linum-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark.el") . 1)) ("linum-light" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark.el") . 1)) ("lightyellow" (nil . 1) (custom-new-theme-mode . 1)) ("counsel" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("my-moe-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("setq-default" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "define-globalized-minor-mode") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("linum-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-default") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("rainbow" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/packages.el") . 1)) ("highlight-indentation" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/packages.el") . 1)) ("highlight-indent-guides" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "interactive") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("highlight-indent-guides" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("yellow" (nil . 1) (custom-new-theme-mode . 1)) ("highlight-indent-guides" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("highlight-indent-guides-character-face" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("face" (nil . 1) (Custom-mode . 1)) ("light" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("variable-pitch" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("highlight-indent-guides-method" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("highlight-indent-guides-responsive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("line" (nil . 1) (Custom-mode . 1)) ("provide" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "quote") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("responsive" (nil . 5) (emacs-lisp-mode . 5) ((:keyword "defun") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 5)) ("rainbow" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("rainbow-indent-highlighter" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("rainbow-indent-highlighter-count" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("responsive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("responsive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("highlight-indent-guides-auto-top-character-face-perc" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("rainbow-indent-highlighter-count" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("rainbow-indent-highlighter-char" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("display" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "if") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("character" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("highlight-indent-guides--highlighter-default" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("responsive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("display" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("responsive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "and") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) (":type" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "defcustom") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 2)) (":type" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defcustom") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("ignore-errors" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "sp-with-modes") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("ignore-errors" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "sp-with-modes") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("require" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "sp-with-modes") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("my-moe-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("my-moe-dark-theme" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "require") . 3) ((:file "/home/linguini/.emacs.d/init.el") . 3)) ("my-moe-dark-theme" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("my-moe-dark-theme" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("face" (nil . 1) (Custom-mode . 1)) ("face" (nil . 1) (Custom-mode . 1)) ("match" (nil . 1) (Custom-mode . 1)) ("rainbow-delimiters-max-face-count" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "if") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("rainbow-delimiters-outermost-only-face-count" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("rainbow-delimiters-max-face-count" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("rainbow" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("faces" (nil . 1) (Custom-mode . 1)) ("adaptive-wrap-prefix-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("rainbow-indent-highlighter" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("responsive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("display" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("proc" (nil . 5) (nim-mode . 3) ((:keyword "return") . 3) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 3)) ("proc" (nil . 1) (snippet-mode . 2)) ("proc" (nil . 1) (snippet-mode . 1)) ("return" (nil . 1) (snippet-mode . 1) ((:keyword ":") . 1) ((:symbol "3") . 1)) ("proc" (nil . 1) (nim-mode . 1) ((:keyword "return") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("procr" (nil . 1) (nim-mode . 1) ((:keyword "return") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("case" (nil . 4) (nim-mode . 4) ((:keyword "proc") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 4)) ("foreground" (nil . 2) (snippet-mode . 2)) ("for" (nil . 1) (nim-mode . 2) ((:keyword "case") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 2)) ("case" (nil . 1) (nim-mode . 1) ((:keyword "in") . 2) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("false" (nil . 2) (nim-mode . 2) ((:keyword "case") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 2)) ("continue" (nil . 1) (nim-mode . 1) ((:keyword "else") . 1) ((:symbol "else") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("primeBool" (nil . 4) (nim-mode . 4) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 4)) ("primeBool" (nil . 1) (nim-mode . 1) ((:keyword "continue") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("case" (nil . 1) (nim-mode . 1) ((:keyword "continue") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("stdout" (nil . 1) (nim-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("write" (nil . 1) (nim-mode . 1) ((:keyword "in") . 1) ((:symbol "stdout") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("foreground" (nil . 1) (snippet-mode . 1)) ("case" (nil . 1) (nim-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("primeBool" (nil . 1) (nim-mode . 1) ((:keyword "if") . 2) ((:symbol "i") . 2) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("echo" (nil . 1) (nim-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("dispose" (nil . 1) (nim-mode . 1) ((:keyword "else") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("i" (nil . 1) (nim-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("false" (nil . 1) (nim-mode . 1) ((:keyword "return") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("fn" (nil . 1) (rust-mode . 1) ((:keyword "mut") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("prime_bool" (nil . 1) (rust-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "in") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "if") . 4) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("println" (nil . 1) (rust-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/Desktop/rust/お試し/src/main.rs") . 1)) ("procCall" (nil . 1) (nim-mode . 1) ((:keyword "return") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("proc" (nil . 1) (nim-mode . 1) ((:keyword "return") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("when" (nil . 1) (nim-mode . 1) ((:keyword "import") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("sleep" (nil . 1) (nim-mode . 1) ((:keyword "defer") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("true" (nil . 1) (nim-mode . 1) ((:keyword "return") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("for" (nil . 1) (nim-mode . 1) ((:keyword "return") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("primeBool" (nil . 1) (nim-mode . 1) ((:keyword "if") . 1) ((:symbol "i") . 1) ((:file "/home/linguini/Desktop/nim/playground/src/playground.nim") . 1)) ("responsive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("responsive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("highlight-indent-guides-top-character-face" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) (":foreground" (nil . 4) (emacs-lisp-mode . 4) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 4)) ("afd7ff" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("ff4b4b" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":weight" (nil . 6) (emacs-lisp-mode . 6) ((:keyword "deftheme") . 2) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 3)) (":background" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":inverse-video" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":with" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("ultra" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":weight" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("string" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":inherit" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "deftheme") . 2) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 3)) ("highlight-indentation" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":inherit" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("hl-stipple" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2)) ("interactive" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("require" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("highlight-indent-guides" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":foreground" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 3) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":foreground" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":foreground" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("set-face-attribute" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2)) ("f0f0f0" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("set-face-attribute" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":inherit" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":stipple" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "dotimes") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2)) ("hl-stipple" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "dotimes") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("dotimes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("load-file" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("~/.emacs.d/themes/my-moe-dark-theme.el" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) (":weight" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("bold" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "if") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":stipple" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("require" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("indent" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("highlight-indent-guides" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("right" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("yellow-2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("regexp" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("regexp-search-ring" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "deftheme") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("replace" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "save-excursion") . 1)) ("start" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "save-excursion") . 1)) ("to-string" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "save-excursion") . 1)) ("white-3" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("lisp" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/packages.el") . 1)) ("package" (nil . 1) (emacs-lisp-mode . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme2.el") . 1)) (":weight" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 3) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme2.el") . 3)) (":weight" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme2.el") . 1)) (":weight" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme2.el") . 1)) ("white-3" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 3) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":background" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 2) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("white-3" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 6) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 6)) ("linum-light" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 7) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 7)) ("left" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("add-hook" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("linum" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("linum" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("fringe-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("lambda" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("setq" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("linum-mode-hook" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("require" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "or") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("setq" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("linum-format" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("diff-hl-mode" (nil . 4) (emacs-lisp-mode . 4) ((:keyword "setq") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 4)) ("diff-hl-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("require" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("diff-hl-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("diff-hl-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("diff-hl" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("window" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("white-3" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("black-5" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("black-2-5" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "ignore-errors") . 2) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2)) ("black-2-5" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":inherit" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 3) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("fringe" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "ignore-errors") . 2) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2)) ("blue-2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("blue-00" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("blue-6" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("cyan-3" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("cyan-0" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("orange-2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("red-00" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("magenta-0" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("magenta-3" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-light" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-light" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":inherit" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("fringe" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-light" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-light" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-light" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-dark" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("linum-light" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("orange-00" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("red-1" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("red1" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("red-2" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "ignore-errors") . 3) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 3)) ("red4" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "ignore-errors") . 2) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2)) ("describe" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("red-2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":color" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":foreground" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("red-2" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("white-0" (nil . 5) (emacs-lisp-mode . 5) ((:keyword "ignore-errors") . 3) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 5)) ("red4" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("white-0" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 2) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("white-0" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("white-1" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "let") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("white-0" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("foreground" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":background" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("white-0" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":inherit" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("mode-line" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("blue-0" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("orange-3" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("shell-command-to-string" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("~/.screenlayout/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("~/.screenlayout/default.sh" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("start" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("centered-cursor" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/packages.el") . 1)) ("exwm" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 2) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("require" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("exwm-randr" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "require") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 2)) ("exwm-randr" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("exwm" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) ("exwm-enable" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/linguini/.emacs.d/init.el") . 1)) (":foreground" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("black-4" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":background" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("white-0" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "ignore-errors") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) (":foreground" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "set-face-attribute!") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1)) ("ignore-errors" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "set-face-attribute!") . 2) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 2)) ("ignore-errors" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "set-face-attribute!") . 1) ((:file "/home/linguini/.emacs.d/themes/my-moe-dark-theme.el") . 1))] company-statistics--index 0)