;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("#'package-archives #'(\"melpa\" . \"https://melpa.org/packages/\")" add-to-list nil nil [61 140])
            ("#'package-archives #'(\"melpa-stable\" . \"https://stable.melpa.org/packages/\")" add-to-list nil nil [160 253])
            ("#'package-archives  #'(\"marmalade\" . \"http://marmalade-repo.org/packages/\")" add-to-list nil nil [270 362])
            ("#'package-archives #'(\"org\" . \"http://orgmode.org/elpa/\")" add-to-list nil nil [373 447])
            ("package-check-signature nil" setq nil nil [566 600])
            ("package-initialize" code nil nil [607 627])
            ("my-gui-packages ;; packages to be installed only in gui #'(exwm gpastel)" setq nil nil [677 768])
            ("my-common-packages #'(centered-cursor-mode 			    calfw-org 			    diff-hl 			    lispxmp 			    highlight-indent-guides 			    quickrun 			    flycheck-nim 			    nim-mode 			    eglot 			    clang-format 			    shackle 			    diminish 			    projectile 			    elein 			    use-package 			    cider 			    clj-refactor 			    clojure-mode 			    s 			    srefactor 			    m-buffer 			    ov 			    elisp-def 			    pcre2el 			    lispy 			    switch-window 			    lua-mode 			    company-lua 			    yasnippet-snippets 			    flycheck 			    flycheck-pos-tip 			    flycheck-popup-tip 			    py-autopep8 			    jedi 			    company-jedi 			    pipenv 			    elpy 			    rust-mode 			    cargo 			    racer 			    flycheck-rust 			    ;; indent-guide 			    review-mode 			    org-plus-contrib 			    nix-mode  			    auto-sudoedit 			    avy 			    winner 			    company-quickhelp 			    company 			    company-flx 			    company-statistics 			    undo-tree 			    counsel 			    smex 			    ivy-rich 			    smartparens 			    leuven-theme 			    moe-theme 			    which-key 			    multiple-cursors 			    powerline 			    multi-term 			    dired-atool 			    dired-toggle-sudo 			    adaptive-wrap 			    rainbow-delimiters 			    general 			    switch-window)" setq nil nil [771 2037])
            ("my-cui-packages ;; packages to be installed only in cui #'()" setq nil nil [2040 2119])
            ("dolist" code nil nil [2121 2231])
            ("window-system" if nil nil [2233 2373])
            ("(not window-system)" if nil nil [2375 2521]))          
      :file "packages.el"
      :pointmax 2522
      :fsize 2557
      :lastmodtime '(23648 57364 379184 811000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("srecode-map" code nil nil [50 1181]))          
      :file "srecode-map.el"
      :pointmax 1182
      :fsize 1181
      :lastmodtime '(23594 14363 261892 926000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("\"~/.emacs.d/packages.el\"" load-file nil nil [187 224])
            ("custom-theme-directory \"~/.emacs.d/themes/\"" setq nil nil [226 276])
            ("set-language-environment" code nil nil [278 316])
            ("prefer-coding-system" code nil nil [318 347])
            ("coding-system-for-read 'utf-8" setq nil nil [348 390])
            ("coding-system-for-write 'utf-8" setq nil nil [391 434])
            ("\"~/.emacs.d/themes/my-moe-dark-theme.el\"" load-file nil nil [674 726])
            ("window-system" if nil nil [728 3660])
            ("(not window-system)" if nil nil [3663 3814])
            ("diff-hl-mode" code nil nil [3817 3833])
            ("diff-hl-flydiff-mode" code nil nil [3834 3856])
            ("display-time-default-load-average nil" setq nil nil [3923 3967])
            ("display-time-mode" code nil nil [3968 3991])
            ("menu-bar-mode" code nil nil [3993 4010])
            ("tool-bar-mode" code nil nil [4011 4029])
            ("scroll-bar-mode" code nil nil [4030 4050])
            ("linum-format \" %4d \"" setq nil nil [4053 4080])
            ("switch-window-threshold 2" setq nil nil [4109 4141])
            ("switch-window-minibuffer-shortcut ?z" setq nil nil [4142 4185])
            ("uim-candidate-display-inline t" setq nil nil [4561 4598])
            ("uim-preedit-display-fences t" setq nil nil [4599 4634])
            ("uim-candidate-display-frame t" setq nil nil [4635 4671])
            ("recentf-auto-cleanup 'never" setq nil nil [5073 5107])
            ("'c-mode-common-hook 'flycheck-mode" add-hook nil nil [5142 5189])
            ("lua-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5343 5398])
            ("'interpreter-mode-alist 	     '(\"lua\" . lua-mode)" add-to-list nil nil [5399 5462])
            ("'auto-mode-alist 	     '(\"\\\\.lua$\" . lua-mode)" add-to-list nil nil [5463 5523])
            ("package-install" code nil nil [5525 5556])
            ("my-lua-mode-company-init" function nil nil [5581 5696])
            ("'lua-mode-hook #'my-lua-mode-company-init" add-hook nil nil [5697 5749])
            ("'nim-mode-hook 'nimsuggest-mode" add-hook nil nil [5753 5795])
            ("global-auto-revert-mode" code nil nil [5797 5824])
            ("nimpretty" function nil nil [5826 5977])
            ("nimpretty-on-save" function nil nil [5979 6069])
            ("nim-indent-offset 4" setq nil nil [6071 6097])
            ("nim-mode-company-init" function nil nil [6099 6212])
            ("'prog-mode-hook #'flycheck-mode" add-hook nil nil [6268 6310])
            ("cider" use-package nil nil [6810 7538])
            ("'emacs-lisp-mode-hook #'lispy-mode" add-hook nil nil [7540 7585])
            ("'clojure-mode-hook #'lispy-mode" add-hook nil nil [7586 7628])
            ("'flycheck" eval-after-load nil nil [7631 7717])
            ("'python-mode-hook 'jedi:setup" add-hook nil nil [7903 7943])
            ("jedi:complete-on-dot t" setq nil nil [7944 7973])
            ("'python-mode-hook #'pipenv-mode" add-hook nil nil [8086 8128])
            ("elpy-enable" code nil nil [8147 8160])
            ("'rust-mode-hook 'cargo-minor-mode" add-hook nil nil [8468 8512])
            ("rust-format-on-save t" setq nil nil [8513 8541])
            ("with-eval-after-load" code nil nil [8542 8630])
            ("'rust-mode-hook #'racer-mode" add-hook nil nil [8631 8670])
            ("'racer-mode-hook #'eldoc-mode" add-hook nil nil [8671 8711])
            ("'racer-mode-hook #'company-mode" add-hook nil nil [8712 8754])
            ("company-tooltip-align-annotations t" setq nil nil [8755 8797])
            ("'flycheck-mode-hook #'flycheck-rust-setup" add-hook nil nil [8798 8850])
            ("highlight-indent-guides-method 'character" setq nil nil [9006 9054])
            ("highlight-indent-guides-character ?\\|" setq nil nil [9055 9099])
            ("highlight-indent-guides-delay 0" setq nil nil [9100 9138])
            ("highlight-indent-guides-responsive 'top" setq nil nil [9139 9185])
            ("rainbow-indent-highlighter-count 9" setq nil nil [9186 9227])
            ("highlight-indent-guides" include nil nil [10080 10114])
            ("rainbow-indent-highlighter" function (:arguments ("depth" "responsive" "display")) nil [10115 10888])
            ("highlight-indent-guides-highlighter-function 'rainbow-indent-highlighter" setq nil nil [10891 10970])
            ("lisp-less-prog-mode-hook-highlight-indent-guides-mode" function nil nil [11035 11341])
            ("'prog-mode-hook 'lisp-less-prog-mode-hook-highlight-indent-guides-mode" add-hook nil nil [11343 11424])
            ("diminish" include nil nil [11500 11519])
            ("diminish" code nil nil [11520 11544])
            ("diminish" code nil nil [11566 11586])
            ("diminish" code nil nil [11623 11647])
            ("diminish" code nil nil [11648 11674])
            ("diminish" code nil nil [11675 11705])
            ("diminish" code nil nil [11706 11746])
            ("diminish" code nil nil [11747 11774])
            ("diminish" code nil nil [11775 11807])
            ("diminish" code nil nil [11808 11834])
            ("diminish" code nil nil [11835 11860])
            ("diminish" code nil nil [11861 11886])
            ("ov" include nil nil [11888 11901])
            ("my/buffer-minchoize" function (:user-visible-flag t) nil [11902 12038])
            ("whitespace-space-regexp \"\\\\(\\u3000+\\\\)\"" setq nil nil [12063 12109])
            ("whitespace-display-mappings '((space-mark ?\\  [?·] [?.]) 	(space-mark ?\\u3000 [?\\□]) 	(space-mark ?\\xA0 [?\\u00A4] [?_]) 	(space-mark ?\\t [?⟼ ?\\t] [?\\\\?\\t]) 	(space-mark ?\\n [?\\¬ ?\\n]))" setq nil nil [12110 12307])
            ("'rust-mode-hook 	  (lambda () 	    (push '(\"=>\" . ?⇒) prettify-symbols-alist))" add-hook nil nil [12338 12427])
            ("'rust-mode-hook 	  (lambda () 	    (adaptive-wrap-prefix-mode  -1))" add-hook nil nil [12429 12507])
            ("shackle" include nil nil [12509 12527])
            ("shackle-rules '((\"*Agenda Commands*\" :aline right :ratio 0.3) 	(\"*Org Agenda*\" :aline right :ratio 0.3) 	(\"*Help*\" :align right :ratio 0.3))" setq nil nil [12528 12681])
            ("shackle-mode" code nil nil [12682 12698])
            ("shackle-lighter \"\"" setq nil nil [12699 12724])
            ("org-directory \"~/Desktop/org/\"" setq nil nil [13414 13451])
            ("org-default-notes-file \"notes.org\"" setq nil nil [13484 13525])
            ("org-agenda-files (list org-directory)" setq nil nil [13527 13571])
            ("ox-latex" include nil nil [13597 13616])
            ("ox-bibtex" include nil nil [13617 13637])
            ("org-latex-pdf-process '(\"platex %f\" \"platex %f\" \"bibtex %b\" \"platex %f\" 			      \"platex %f\" \"dvipdfmx %b.dvi\")" setq nil nil [13672 13790])
            ("'org-latex-classes 	     '(\"thesis\" \"\\\\documentclass{jarticle} 		[NO-PACKAGES] 		[NO-DEFAULT-PACKAGES] 		\\\\usepackage[dvipdfmx]{graphicx}\" 	       (\"\\\\section{%s}\" . \"\\\\section*{%s}\") 	       (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") 	       (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") 	       (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") 	       (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))" add-to-list nil nil [13857 14267])
            ("my-avy-goto-char" function
               (:user-visible-flag t
                :arguments ("char" "arg"))
                nil [14451 14733])
            ("winner-mode" code nil nil [14735 14750])
            ("global-company-mode" code nil nil [14755 14778])
            ("company-idle-delay 0" setq nil nil [14779 14806])
            ("with-eval-after-load" code nil nil [14807 14861])
            ("company-minimum-prefix-length 1" setq nil nil [14863 14901])
            ("company-quickhelp-mode" code nil nil [14902 14930])
            ("company-statistics" include nil nil [15779 15808])
            ("company-statistics-mode" code nil nil [15809 15834])
            ("company-transformers '(company-sort-by-backend-importance 			     company-sort-by-statistics 			     company-sort-by-occurrence)" setq nil nil [15835 15970])
            ("company-require-match nil" setq nil nil [15972 16004])
            ("yas-global-mode" code nil nil [16006 16025])
            ("global-undo-tree-mode" code nil nil [16906 16932])
            ("ivy-rich" include nil nil [16942 16961])
            ("ivy-mode" code nil nil [16962 16974])
            ("ivy-rich-mode" code nil nil [16975 16992])
            ("ivy-re-builders-alist #'((t . ivy--regex-ignore-order))" setq nil nil [16993 17055])
            ("sp-with-modes" code nil nil [17104 17290])
            ("smartparens-global-mode" code nil nil [17291 17318])
            ("show-smartparens-global-mode" code nil nil [17320 17352])
            ("\"~/.emacs.d/themes/my-moe-dark-theme.el\"" load-file nil nil [17445 17497])
            ("which-key-mode" code nil nil [17526 17544])
            ("multiple-cursors-mode" code nil nil [17572 17597])
            ("projectile-global-mode" code nil nil [17694 17720])
            ("winum-mode" code nil nil [17722 17736])
            ("telephone-line-faces '((evil . (mode-line . mode-line-inactive)) (accent .(mode-line-emphasis . mode-line-emphasis)) (nil . (mode-line-inactive . mode-line-inactive)))" setq nil nil [17756 17952])
            ("telephone-line-lhs '((evil . (telephone-line-window-number-segment t)) 	(accent . (telephone-line-input-info-segment 		   telephone-line-projectile-buffer-segment)) 	(nil . (telephone-line-buffer-modified-segment 		telephone-line-major-mode-segment 		telephone-line-minor-mode-segment)))" setq nil nil [17967 18267])
            ("telephone-line-rhs '((nil . (telephone-line-minor-mode-segment)) 	;; version-cotrolのブランチを表示 	(accent . (telephone-line-flycheck-segment 		    telephone-line-atom-encoding-segment 		    telephone-line-narrow-segment 		    (telephone-line-vc-segment :active))) 	(evil . (telephone-line-misc-info-segment 		 telephone-line-filesize-segment 		 telephone-line-hud-segment)))" setq nil nil [18283 18665])
            ("telephone-line-mode" code nil nil [18667 18690])
            ("dired-mode-map \"z\" #'dired-atool-do-unpack" define-key nil nil [18722 18777])
            ("dired-mode-map \"Z\" #'dired-atool-do-pack" define-key nil nil [18778 18831])
            ("define-globalized-minor-mode" code nil nil [18852 18971])
            ("global-adaptive-wrap-prefix-mode" code nil nil [18972 19008])
            ("#'rust-mode-hook '(lambda () (adaptive-wrap-prefix-mode -1))" add-hook nil nil [19010 19081])
            ("cursor-type '(bar . 1)" setq-default nil nil [19083 19120])
            ("rainbow-delimiters-outermost-only-face-count 1" setq nil nil [19139 19192])
            ("define-globalized-minor-mode" code nil nil [19194 19307])
            ("global-rainbow-delimiters-mode" code nil nil [19309 19343])
            ("define-globalized-minor-mode" code nil nil [19345 19449])
            ("global-centered-cursor-mode" code nil nil [19450 19481])
            ("my_hideshow-ignore-setup-failure" function nil nil [19483 19560])
            ("define-globalized-minor-mode" code nil nil [19561 19661])
            ("global-hs-minor-mode" code nil nil [19662 19684])
            ("eww-search-prefix \"https://www.google.co.jp/search?q=\"" setq nil nil [19712 19773])
            ("(kbd \"<f1> ESC\") 		#'execute-extended-command" global-set-key nil nil [19775 19837])
            ("(kbd \"C-l\") 		#'redraw-display" global-set-key nil nil [19839 19886])
            ("counsel-mode" code nil nil [19889 19905])
            ("my-goto-line-beginning-or-indent" function
               (:user-visible-flag t
                :arguments ("$position"))
                nil [19909 20245])
            ("general-define-key" code nil nil [20248 20798])
            ("clang-save" function nil nil [20800 20877])
            ("general-define-key" code nil nil [20879 20940])
            ("general-define-key" code nil nil [20942 21012])
            ("general-define-key" code nil nil [21213 21319])
            ("general-define-key" code nil nil [21321 21567])
            ("general-define-key" code nil nil [21570 21666])
            ("general-define-key" code nil nil [21669 21805])
            ("with-eval-after-load" code nil nil [21807 22025])
            ("general-define-key" code nil nil [22028 22080])
            ("with-eval-after-load" code nil nil [22082 22231])
            ("custom-safe-themes t" setq nil nil [22618 22645])
            ("undo-tree-auto-save-history t" setq nil nil [22646 22682])
            ("desktop-save-mode" code nil nil [22683 22704])
            ("custom-set-variables" code nil nil [22706 27200])
            ("custom-set-faces" code nil nil [27202 27441])
            ("'dired-find-alternate-file 'disabled nil" put nil nil [27444 27495]))          
      :file "init.el"
      :pointmax 26072
      :fsize 28227
      :lastmodtime '(23649 32136 999293 396000)
      :unmatched-syntax '((semantic-list 18362 . 18381) (semantic-list 18334 . 18360) (semantic-list 17439 . 17469) (semantic-list 16301 . 16324) (semantic-list 13658 . 13673) (semantic-list 12797 . 12818) (semantic-list 11264 . 11286) (semantic-list 7917 . 7942) (semantic-list 7899 . 7916) (semantic-list 7881 . 7898) (semantic-list 7859 . 7880) (semantic-list 7605 . 7621) (semantic-list 7542 . 7560) (semantic-list 7208 . 7231) (semantic-list 7011 . 7041) (semantic-list 4937 . 4960) (semantic-list 4702 . 4722) (semantic-list 4572 . 4593) (semantic-list 3814 . 3830) (semantic-list 3460 . 3485)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company-statistics--scores #s" setq nil nil [1 82273]))          
      :file "company-statistics-cache.el"
      :pointmax 82273
      :fsize 83592
      :lastmodtime '(23649 31922 289297 473000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mc/cmds-to-run-for-all '( 	counsel-M-x 	indent-for-tab-command 	mouse-set-region 	my/exwm-counsel-yank-pop 	swiper 	swiper-mc 	)" setq nil nil [159 300])
            ("mc/cmds-to-run-once '( 	)" setq nil nil [302 340]))          
      :file ".mc-lists.el"
      :pointmax 341
      :fsize 2392
      :lastmodtime '(23647 62568 920104 607000)
      :unmatched-syntax nil))
  :file "!home!linguini!.emacs.d!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
